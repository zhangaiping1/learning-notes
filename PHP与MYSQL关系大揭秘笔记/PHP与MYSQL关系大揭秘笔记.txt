第1-1课
PHP与MYSQL--天生的完美搭档

第2-1课
连接数据库

PHP内置MYSQL函数：
mysql_connect   --建立数据库连接

建立好一个叫info的数据库，地址在localhost路径下，然后用PHP来连接这个数据库

建立一个test.php的文件。
<?php 
    mysql_connect('localhost','root','123');   //接收三个参数，第一个参数是数据库地址，第二个参数是用户名，第三个参数是密码。
                                               //1、连接成功的时候，返回MYSQL连接标志符。2、连接失败的时候返回false
?>

将上面的结果保存在一个变量里，并且做一个判断是否连接成功。
<?php 
header("Content-type:text/html;charset=utf-8");  //这句话的意思是保证编码方式是uft8
if($con=mysql_connect('localhost','root','123')){
	echo "连接成功";
}else{
	echo "连接失败";
}
?>


第2-2课
PHP支持哪些数据库


第2-3课
数据库扩展

mysql扩展进行数据库连接的方法：
$link = mysql_connect('mysql_host','mysql_user','mysql_password');

mysqli扩展：
$link=mysqli_connect('mysql_host','mysql_user','mysql_password');

PDO扩展：
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';
$dbh = new PDO($dsn,$user,$password);


第2-4课
连接MYSQL数据库
建立连接首先要进行地址，用户，密码的连接。
mysql_connect('localhost','root','123');

然后要进行数据库的选择：这里选择的是数据库，并不是数据表。
mysql_select_db('code1');

然后要进行编码的设置：
mysql_query("set names 'utf8'");


第2-6课
关闭数据库
mysql_close()  //关闭数据库连接

<?php 
header("Content-type:text/html;charset=utf-8");  //这句话的意思是保证编码方式是uft8
if($con=mysql_connect('localhost','root','123')){
	echo "连接成功";
}else{
	echo "连接失败";
}
mysql_close($con);
?>


第2-7课
打开数据库：

mysql_selct_db()   //选择数据库，1、当选择成功的时候，返回true。2、当选择失败的时候返回false。

<?php 
header("Content-type:text/html;charset=utf-8");  //这句话的意思是保证编码方式是uft8
if($con=mysql_connect('localhost','root','123')){
	echo "连接成功";
}else{
	echo "连接失败";
}

if(mysql_select_db('info')){     //这里选择的是数据库，并不是表。
	echo"选择数据库成功";
}else{
	echo"选择数据库失败";
}

mysql_close($con);
?>


第2-9课
执行SQL语句

有时数据库会显示汉字为问号，设置方法如下：

http://www.2cto.com/database/201412/358422.html

下面我介绍这种方法，一劳永逸。

phpmyadmin 创建数据库的默认编码是：latin1_swedish_ci

修改默认编码的方法是

1.登录phpmyadmin

2.在导航部分点：变量

3.Ctrl+F 查找：latin1_swedish_ci

4.把所有的带有latin1_swedish_ci 修改为 想要的编码，我设置为：utf8_general_ci

走你！吐舌头

然后可以在sql命令控制台输入 ：show variables like '%char%';

如果发现还不是的话，输入下面的句子：

命令行输入 set character_set_database=utf8;

再次输入 set character_set_server=utf8;（这两个不一样啊、注意一下）




mysql_query()   //执行一条SQL语句  在执行insert的时候，1、当插入成功，返回true。2、插入失败返回false。

show variables like '%char%'    这是测试字符集的语句，要保证字符集正确。

<?php 
header("Content-type:text/html;charset=utf-8");  //这句话的意思是保证编码方式是uft8
if($con=mysql_connect('localhost','root','123')){
	echo "连接成功";
}else{
	echo "连接失败";
}

if(mysql_select_db('info')){     
	echo"选择数据库成功";
}else{
	echo"选择数据库失败";
}
if(mysql_query('insert into test(name) values("abc")')){
	echo"插入成功";
} else{
	echo mysql_error();        //这是提供的一个出错以后的提示，不用传入参数，当MYSQL出错时，会返回错误提示。
	echo"插入失败";
}
mysql_close($con);
?>


第2-10课
执行MYSQL查询

mysql_query() 可以执行SQL语句。

如果执行的语句是查询语句，会返回一个资源句柄，可以通过该资源获取查询结果集中的数据。
$res=mysql_query('select * from user limit 1');
$row=mysql_fetch_array($res);
var_dump($row);

默认的，PHp使用最近的数据库连接执行查询，但如果存在多个连接的情况，则可以通过参数指令从那个连接中进行查询。
$link1 = mysql_connect('localhost','code1','');
$link2 = mysql_connect('localhost','code1','',true);   //开户一个新的连接
$res = mysql_query('select * from user limit 1',$link1);  //从第一个连接中查询数据


第2-11课
插入新数据到MYSQL中

通常数据都是存储在变量或者数组中，因此SQL语句需要先进行字符串拼接得到。
$name='李四';
$age=18;
$class='高三一班';
$sql='insert into user(name,age,class) values($name,$age,$class)';
mysql_query($sql);

在MYSQL中，执行插入语句以后，可以得到自增的主键ID，通过PHP的mysql_insert_id函数可以获取该ID。

$uid = mysql_insert_id();

这个ID作用非常大，可以用来判断是否插入成功，或者作为关联ID进行其他的数据操作。


第2-13课
总结：

mysql_connect():
作用：建立数据库连接
参数：数据库服务器地址，数据库用户名，密码
返回值：1、当连接成功的时候返回mysql连接标识符。
	2、当连接失败的时候返回false。

mysql_select_db():
作用：选择数据库
参数：数据库名称，（MYSQL连接标识符，可选）
返回值：1、当选择成功的时候返回true。
	2、当选择失败的时候返回false。

mysql_query():
作用：执行一条MYSQL查询
参数：SQL命令，（MYSQL连接标识符，可选）
返回值：1、当执行成功的时候，目前我们知道的是，insert成功，返回true。
	2、当执行失败的时候返回false。

mysql_error():
作用：返回上一个MYSQL操作产生的文本错误信息
参数：（可选MYSQL连接标识符）
返回值：1、返回上一个MYSQL操作产生的文本错误信息。

mysql_close():
作用：函数关闭非持久的MYSQL连接
参数：MYSQL连接标识符
返回值：1、关闭成功true
	2、关闭失败false



第3-1课
mysql_fetch_row()       获取和显示数据
mysql_fetch_array()     获取和显示数据
mysql_fetch_assoc()     获取和显示数据
mysql_fetch_object()    获取和显示数据

向数据库内插入数据时，要先设置编码方式   
mysql_query('set names utf8');

mysql_query('insert into test(name) values('苹果')');

这样在插入中文的时候才不会乱码。

mysql_fetch_row():返回查询到的资源的第一条数据。每执行一次，都从资源也就是结果集里依次取更重要的数据，以数组的形式返回出来，当前一次已经取到最后一条数据的时候，这一次返回空结果。返回的数组是一个一维索引数据，每一个下标与数据库里字段的排序相对应。
$q=mysql_query('select * from test');
print_r(mysql_fetch_row($q));

如果需要全部都显示出来，可以加一个循环。
while($row=mysql_fetch_row($q)){
	print_r($row);
}

如何反复的执行mysql_fetch_row()则会按照顺序一条一条的提取数据库的数据。



第3-3课
mysql_fetch_array()以混合数组形式获取数据：

mysql_fetch_row()和mysql_fetch_array()的区别：
1、mysql_fetch_row()取一条数据产生一个索引数组。
2、mysql_fetch_array()取一条数据产生个索引数组和一个关联数组。
这样的话，如果想取内容的话，就可以通过键名来取了。
不过mysql_fetch_row()要比mysql_fetch_array()快很多。
eg:
$arr=mysql_fetch_array($query);
echo $arr['name'];


mysql_fetch_array()接收两个参数，第二个参数是设置输出的数组类型：注意：参数要大写。。
1、MYSQL_ASSOC   --关联数组
2、MYSQL_NUM     --数字数组（索引数组）
3、MYSQL_BOTH    --默认



第3-4课
mysql_fetch_assoc()以关联数组形式获取数据

基本上和mysql_fetch_array('资源标识符',mysql_assoc);一样的效果。

也是每次从结果集里取一条数据，同样也可以通过while循环将数据全部取出来 。


第3-7课
mysql_fetch_object()以对象形式获取数据

$query=mysql_query('select * from fruitshop');
$arr=mysql_fetch_object($query);
print_r($arr);         //打印这个对象的所有属性。
echo $arr->name;            //取该对象的某个属性。


也可以循环取得对象的某个属性。
while($arr=mysql_fetch_object($query)) {
	echo $arr->name;
	echo '<br />';
}



第4-1课
mysql_num_rows()获取结果集中行的数目,注意，是结果集中的行数。
可以用在测试条件里，比如如果获取到的结果集数量为零，则停止输出。把这个函数写入到if的判断条件中。如果为零，则为false，则输出else里的内容 。

eg: echo mysql_num_rows($query);



第4-3课
mysql_result()获取结果集中一个字段的值。

mysql_result(结果集,想要得到的结果的行号,字段名（偏移量）);

偏移量的意思就是第几个字段。也是从零开始。

eg:
$query=mysql_query('select count(*) from test');
echo mysql_result($query,0);

$query= mysql_query('select * from test');
echo mysql_result($query,2,'name');



第4-4课
mysql_affected_rows()获取前一次操作受影响的记录行数。接受一个参数，参数是连接标识符。

注：只能记录上一次的操作，如果连续两条操作的话，只能记录一条。

连接标识符：就是连接数据库成功以后返回的那个连接标识符。
$con=mysql_connect('localhost','root','000000');
这个$con就是连接标识符。

eg:
$con=mysql_connect('localhost','root','000000');
if(mysql_query('update test set num=3 where id=1')){
	

	echo '修改成功，修改的条件为';
	echo mysql_affected_rows($con);//参数为连接标识符。
}else{
	echo '修改失败';
}


在PHP插入内容的时候，注意MYSQL语句内的转义：

mysql_query("insert into test (name,kc,price) values(\'梨\',2,3);");




第5-1课
文章发布系统的架构分析和设计

后台管理系统：1、文章管理列表 2、文章发布程序 3、文章修改程序 4、文章删除程序

前台展示系统：1、文章列表 2、文章内容页

数据库表设计：
表名：article ,用于存放文章。

字段           类型            空    默认  注释  
id             int(11)         否          文章编号（自增长）
title          char(100)       否          文章标题
author         char(50)        否          文章作者
description    varchar(255)    否          文章简介
content        text            否          文章内容
dateline       int(11)         否     0    发布时间

目录规划、程序文件规划及命名:
article-----------------------------文章发布系统根目录
  admin-----------------------------后台系统目录
     article.add.php----------------文章添加界面
     article.add.handle.php---------文章添加处理程序
     article.modify.php-------------文章修改界面
     article.modify.handle.php------文章修改处理程序
     article.del.handle.php---------文章删除处理程序
     article.manage.php-------------文章管理列表
  article.list.php------------------前台文件展示列表
  article.show.php------------------前台文章内容页
  config.php------------------------配置文件
  connect.php-----------------------MYSQL连接初始化程序



第5-2课
创建配置文件和初始化文件

文件发布系统-mysql连接、初始化程序

文件编写的意义：统一配置、方便管理、减少代码冗余

配置文件编写：config.php

MYSQL初始化程序文件编写：connect.php


config.php:为防止后期会修改，所以定义为常量。
<?php
	header("Content_type:text/html;charset=utf-8");
	define('HOST','127.0.0.1');
	define('USERNAME','root');
	define('PASSWORD','000000');

?>


connect.php:
<?php

	require_once('config.php');//将上一个已经写好的PHP文件包含进来
	//连库
	$con=mysql_connect(HOST,USERNAME,PASSWORD);
	//选库
	mysql_select_db('info');
	//字符集
	mysql_quert('set names utf8');

?>



第5-3课
发布文章

文章发布界面编写：article.add.php

文章发布处理程序的编写：article.add.handle.php

程序测试：

article.add.php:这个页面其实就是一个HTML页面，带一个表单，将内容填写进去，然后提交给处理程序处理。

其它的页面都是普通的HTML，中间的主要部分是一个form表单，带上id,name,method,action等。method指向提交方式。action指向处理页面。

form表单下，是table/tr/td/等等。td下面有input 代有type,name,id属性。

最后有个按钮，type=submit，是个提交按钮。


article.add.handle.php:上个页面将内容填写好以后提交到这个页面进行处理。这个页面必须存为（utf-8 无签名）格式



<?php
	require_once('../connect.php');
	//把传递过来的信息入库，在入库之前对所有的信息进行校验。下面这是简单的校验，还可以校验是否有非法字符。
	if(!(isset($_POST['title'])&&(!empty($_POST['title'])))){
		echo "<script>alert('标题不能为空');window.location.href='article.add.php'</script>";
	}
	//print_r($_POST);
	$title=$_POST['title'];
	$author=$_POST['author'];
	$description=$_POST['description'];
	$content=$_POST['content'];
	$dateline=time();//用这个函数来获取时间戳。
	$insertsql="insert into article (title,author,description,content,dateline)values('$title','$author','$description','$content',$dateline)";   //$dateline因为是数字，不用加引号。

	echo $insertsql;        //测试语句是否正确，将语句打印出来以后，复制进数据库进行插入测试。如果成功，删除这条语句，继续进行。
	if(mysql_query($insertsql)){
		echo "<script>alert('插入成功');window.location.href='article.add.php'</script>";
	}else{
		echo "<script>alert('插入失败');window.location.href='article.add.php'</script>";
	}
	
?>















































































































