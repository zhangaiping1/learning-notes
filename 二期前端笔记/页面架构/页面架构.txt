1、css reset 全局样式定义（并非只是清除默认样式）

浏览器会自带一些样式 ，我们可以通过将标签的属性设置成100%，0之类的数值把他清除掉。

reset的引入的时候一定要放在第一位

2、居中布局

以下布局父容器和子容器都是DIV
以下的宽度未知和高度未知的意思并非是不固定，而是不论固定到多少大小，里面的内容永远是居中的。

水平居中：
里面容器宽度不定，外面容器宽度不定：
inline-block + text-align:
父元素：text-align:center;
子元素：display:inline-block; text-align:left;
注：如果设置margin需要元素必须是块元素，inline-block是不行的。
优点：兼容性好  缺点：需要加text-align:left;来进行修正。

table + magin:
父元素：
子元素：display:table; margin:0 auto;
注：如果设置margin需要元素必须是块元素，而display:table正好是块元素。
优点：没有多余代码   缺点：不兼容IE67。想兼容得把DIV的结构换成table的结构。

注：table
使该元素按table样式渲染
table元素是块元素，且宽度默认为内容宽度。
table-row
使该元素按tr样式渲染
table-cell
使该元素按td样式渲染


absolute + transform
父元素：position:relative;
子元素：position:absolute; left:50%; transform:translateX(-50%);
注：父元素内不能放其它的内容。否则子元素会错位。
优点：因为绝对定位，所以这个方法对其它的元素是没有影响的。   缺点：没办法兼容IE678

flex + justify-content:
当父元素设置了display:flex以后，子元素会全部成为flex-item，宽度会随内容宽度。
父元素：display:flex; justify-content:center;
子元素：
或者：
父元素：display:flex; 
子元素：margin:0 auto;
优点：代码量少  缺点：没办法兼容IE678


垂直居中：
子容器宽度不定，父容易宽度不定

table-cell + vertical-align:
父容器：display:table-cell;vertical-align:middle;
子容器：
注：给父元素设置了table-cell，那么容器宽高会是内容的宽高，子元素因为继承也会一样，然后设置vertical-align。
优点：兼容性很好，兼容到IE8

absolute + transform:
父容器：position:relative;
子容器：position:absolute; top:50%; transform:translateY(-50%);
优点：不影响其它元素。 缺点：兼容性不太好，还要给属性加私有前缀。

flex + align-items:
父元素：display:flex; align-items:center;
子元素：
优点：代码量少   缺点：兼容性不好。


居中（水平+垂直）：
父容器宽度高度未知，子容器宽度高度也未知，然后水平垂直居中。

方法：综合上面的两种方法：

inline-block + text-align + table-cell + vertical-align:
父元素：text-align:center; display:table-cell; vertical-align:middle;
子元素：display:inline-block;
优点：兼容性好。

absolute + transform:
父元素：position:relative;
子元素：position:absolute; left:50%; top:50%; transform:translate(50%,50%);
优点：不会对其它元素有影响   缺点：兼容性不太好。

flex + justify-content +flex-items:
父元素：display:flex; justify-content:center; flex-items:center;
子元素：
优点：代码量少   缺点：兼容性不好。

3、多列布局

一列定宽+一列自适应：
float + margin:

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		
	}
	.left{
		float: left;
		width: 100px;
	}
	.right{
		margin-left: 120px;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>

float + overflow:


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		
	}
	.left{
		float: left;
		width: 100px;
		margin-right: 20px;
	}
	.right{
		overflow: hidden;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


table:


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		display: table; width: 100%;
		table-layout: fixed;
	}
	.left,.right{
		display: table-cell;
	}
	.left{
		width: 100px;
		padding-right: 20px;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


flex:


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		display: flex;
	}
	.left{
		width: 100px;
		margin-right: 20px;
	}
	.right{
		flex: 1;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


多列定宽+一列自适应：
方法和一列定宽是一样的，加再一列，然后把定宽的样式应用上去。


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		
	}
	.left,.center{
		float: left;
		width: 100px;
		margin-right: 20px;
	}
	.right{
		overflow: hidden;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="center">
		<p>center</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


一列不定宽+一列自适应：
float + overflow


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		
	}
	.left{
		float: left;
		margin-right: 20px;
	}
	.right{
		overflow: hidden;
	}
	.left p{width: 200px;}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>



table


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		display: table; width: 100%;
	}
	.left,.right{
		display: table-cell;
	}
	.left{
		width: 0.1%;
		padding-right: 20px;
	}
	.left p{
		width:200px;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


flex:


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		display: flex;
	}
	.left{
		margin-right: 20px;
	}
	.right{
		flex: 1;
	}
	.left p{width: 200px;}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


多列不定宽+一列自适应：


<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		
	}
	.left,.center{
		float: left;
		margin-right: 20px;
	}
	.right{
		overflow: hidden;
	}
	.left p,.center p{
		width: 100px;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="center">
		<p>center</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>


等分布局：

float:

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		margin-left: -20px;
	}
	.column{
		float: left;
		width: 25%;
		padding-left: 20px;
		box-sizing: border-box;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="column"><p>1</p></div>
	<div class="column"><p>2</p></div>
	<div class="column"><p>3</p></div>
	<div class="column"><p>4</p></div>
</div>
</body>
</html>
注：通过扩展内容宽度到四个间距+四个内容距离。然后通过25%等分，box-sizing设置成宽度包含padding
    这种做法百分比和列数是对称的，需要注意。
优点：兼容性兼容到IE8，IE67对百分比支持不好。


table:

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent-fix{
		margin-left: -20px;
	}
	.parent{
		display: table;
		width:100%;
		table-layout: fixed;
	}
	.column{
		display: table-cell;
		padding-left: 20px;
	}
</style>
</head>
<body>
<div class="parent-fix">
	<div class="parent">
		<div class="column"><p>1</p></div>
		<div class="column"><p>2</p></div>
		<div class="column"><p>3</p></div>
		<div class="column"><p>4</p></div>
	</div>
</div>
</body>
</html>
table-layout:fixed:
1、加速渲染速度。
2、不加宽度的情况下，平分内容。





flex:

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	
	.parent{
		display: flex;
	}
	.column{
		flex: 1;
	}
	.column+.column{
		margin-left:20px;
	}
</style>
</head>
<body>
<div class="parent">
	<div class="column"><p>1</p></div>
	<div class="column"><p>2</p></div>
	<div class="column"><p>3</p></div>
	<div class="column"><p>4</p></div>
</div>
</body>
</html>


右边内容高度增加以后，左边内容高度变成和右边一样高。

table和flex都是可以的。

float:假等高。

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>多列布局</title>
<link rel="stylesheet" type="text/css" href="demo.css">
<style type="text/css">
	body{margin:20px;}
	p{background: none!important;}
	.left,.right{background: #444;}
	.parent{
		overflow: hidden;
	}
	.left,.right{
		padding-bottom: 9999px;
		margin-bottom: -9999px;
	}
	.left{
		float: left; width: 100px;
		margin-right: 20px;
	}
	.right{
		overflow: hidden;
	}

</style>
</head>
<body>
<div class="parent">
	<div class="left">
		<p>left</p>
	</div>
	<div class="right">
		<p>right</p>
		<p>right</p>
	</div>
</div>
</body>
</html>









     












































