1、JS介绍

2、JS调试

调试面板的右上角会显示有多少个错误，然后在console面板中会显示错误内容，并在后面跟上错误的文件及行数。

检查错误：根据写代码的思路，一步一步的检查看错误在哪里。

可以用alert(xx);来检测某个变量是值。但是这个需要点击，比较麻烦。所以可以使用console.log(xx);

如果变量比较多，就需要用到JS的调试器：
chrome:Sources窗口
左侧是文件窗口，中间是调试的文件窗口，文件窗口左侧可以设置断点。
右侧有4个按钮，第一个是继续执行按钮，第二个是单步执行按钮 ，第三个是进入函数按钮，第四个是退出函数按钮。
右侧中间是调试的信息。如果想查看特殊的变量，可以在Watch Expressions中添加变量。
Call Stack是堆栈。
Sources面板中也可以直接打开Console面板。

操作：
打开Sources面板后，在左侧找到相应的需要调试文件，如果文件较多，可以用ctrl+o来查找，输入文件名即可。
如果要调试某个函数，在找到函数后，在函数内第一行设置一个断点（点击行号即可）。
如果函数较多，可以ctrl+shift+o来进行查找。
设置断点以后，在函数中进行操作，函数就会停到断点的那一行。然后就可以用右侧按钮进行调试。
点击单步执行，就会从上一个语句跳到下一个语句。
在Scope中的Local中可以看到局部变量，在Global中可以看到全局变量。
可以在Watch中添加想要查看的变量。直接输入变量名即可。
可以按ESC按键调出Console面板。
想看哪个变量的值，就在Console面板中直接输入变量名即可。
在某一行有其它的函数，如果想查看该函数内容，点击进入函数按钮，即可进入查看。
的Call Stack中可以看到函数的堆栈（被哪个函数调用方法）。
在堆栈中点击调用函数的方法，就可以回到该方法的作用域中。
如果想退出该函数，就可以点击退出函数按钮。
当调试完毕以后，就可以点击继续执行按钮让函数继续执行。
调试结束。

单步执行会执行当前行，然后跳到下一行等待。
继续执行会将当前文件执行一遍。如果中间有其它的断点，会停到下一个断点上。
+
Console面板不只是可以输入变量，还可以改变变量的值。
当运行到某个函数以后，前面有变量XX，那就可以通过 XX=10;来改变XX的值。

注：在调试代码的时候不能输入console.log  alert  等等。如果想输入这些，需要在真实代码里输入。


3、基本语法

同时声明多个变量:
eg:
var name='abc',
    age=18,
    sex='man';

关键字和保留字：
var case=1;  
上面的语句运行以后会提示：SyntaxError:missing variable name  (没有变量名)
这种的就是关键字或者保留字。

ReferenceError:Age is not defined  (Age没有定义)

4、基本类型

数字类型有两个特殊值：NaN和Infinity(无穷大，这个有正负值。)

null类型：表示一个空对象，对象不存在。
如果一个对象将来要表示是一个object对象，那在没有初始化之前，可以将他赋值为一个null。

undefined类型：
出现场景：已声明未赋值的对象    获取对象不存在的属性

类型识别方法：typeof
eg:
var num=1;
typeof num; //number

原始类型和引用类型的区别:
原始类型值是单独的，改变一个，另一个不改变。
引用类型值是指针形式的，改变一个，另一个也会改变。

 
5、运算符与表达式

++age 和age++：前加加会先加加，再走其它，后加加会先走语句中的其它部分，再加加。
eg:
var age=29;
var num=age++; //num=29
这里先走的赋值，然后才会加加。

空的数组转换成布尔值是true  eg:alert(![]);    //false

想取得某个类型的布尔值：可以用!!
eg:alert(!![]);   //true


逻辑操作符：
&&:如果逻辑与的第一个操作符是false，那么第二个操作是不会进行的。如果第一个操作符是true,就是返回第二个值。
eg:
var obj=""||num++;   //false  第二个加加是不会运行的。

||:如果逻辑或的第一个操作符是true,那么第二个操作是不会进行的。
eg:
var obj=1 || num++; //这里num++是不会进行的。

对象操作符：
delete:删除对象属性
eg: delete cat.name;  //可以删除一个对象的属性。

instanceof:判断某个变量是否是某个对象的实例
eg:
var cat={name:'kitty',age:2};
alert(cat instanceof Object);   //true

in:判断某个属性是否在对象中
eg:
var cat={name:'kitty',age:2};
alert('name' in cat); //true

操作符优先级：如果操作符优先级不确定的话，最保险的办法就是加括号。


6、语句

条件语句除了if  esle之外，还有一种是switch语句
switch(条件句){

case 值1: 语句
break;
case 值2: 语句
break;
default:语句

}


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>switch语句</title>
</head>
<body>
<script>
  var degree = 'B';
  switch(degree){
    case 'A':
      document.write('优秀');
      break;
    case 'B':
      document.write('良好');
      break;
    default:
      document.write('合格');
  }

</script>
</body>
</html>

循环语句：
循环中会用到两个关键字：break和continue
break:跳出循环
continue:跳过当次循环，进入下一次循环。


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>for语句</title>
</head>
<body>
<script>
  for(var i = 1; i <= 10; i++){
    document.write(i);
  }

  /*for(var i = 1;i <= 10;i++){
    if(i == 5){break;}
    document.write(i);
  }

  for(var i = 1;i <= 10;i++){
   if(i == 5){continue;}
   document.write(i);
  }*/


</script>

</body>
</html>

for-in循环：用来遍历对象中的属性名。(for(属性名 in 对象) {语句})

with语句：with(表达式){语句}
作用：将当前语句中的代码的作用域指向一个特殊的对象上，所以一般情况下表达式里面会是一个对象。


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>with语句</title>
</head>
<body>
<script>
  var kitty = {
    age:3,
    friend:{
      name:'snoopy',
      age:2
    }
  }

  with(kitty.friend){
    document.write(name + '\'s age is' + age);   //将name age的作用域指向了kitty.friend这个对象。
  }

</script>
</body>
</html>



异常捕获语句：
try{
语句
}catch(exception){
语句
}finally{
语句
}

try一个语句，如果出错，则exception里面会是错误，下面语句就是对这个错误执行的语句。
然后不论try语句是否出错，都会执行finally中的语句。


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>try catch语句</title>
</head>
<body>
<script>
  try{
    document.write(notDefined);
  }catch(error){
    console.log(error);
    alert(error);
  }finally{
    alert('finally');
  }
</script>
</body>
</html>


7、数值

绝对值：Math.abs(x)      abs:absolute

四舍五入：Math.round(x)  注：可以通过四舍五入将一个浮点型的数值转换成一个整型的数值。

向上取整：Math.ceil(x)   注：向上取整就是取大数。

向下取整：Math.floor(x)  注：向下取整就是取小数。

取最大值：Math.max([value1[,value2[,...]]])  注：取若干个数里的最大值。

取最小值：Math.min([value1[,value2[,...]]])  注：取若干个数里的最小值。

随机数：  Math.random()  注：这个随机数的范围是 0<=x<1


将字符串转换成整型数字：parseInt(string,radix)
接受两个参数，第一个参数是字符串，第二个参数是输出的进制。第二个参数通常不用。
将获取到的字符串转换成数字，并向下取整。
如果字符串内有非数字，则从非数字开始后面全部丢弃。如果第一个就是非数字，则输出NaN

将字符串转换成浮点型数字：parseFloat(string)
如果字符串内有非数字，则从非数字开始后面全部丢弃。如果第一个就是非数字，则输出NaN

将内容转换成数字：Number(value)
这个得到的结果是浮点型数字。
如果内容里面有非数字，则整个都输出为NaN
注：这里的Number的N要大写。
Number(12.4b5);  //NaN

保留X位小数点：num.toFixed(digits)
前面的num是需要操作的数字，后面的参数是要保留的小数点位数。
注：前面的数字需要用括号括起来，因为数字里面有小数点。
注2：输出的数字是字符串。
eg:(100.123).toFixed(2)       //100.12


8、字符串

字符串的长度：str.length;

字符串某个位置的字符：str.charAt(index)
eg:
if('-micr'.charAt(0)=='-'){
alert("首字符不能为'-'");
}

所查找的字符的所在位置（可以用来判断字符是否存在）：str.indexOf(searchValue[,formIndex])
接受两个参数，第一个参数是要查找的字符，第二个参数是查找的起始位置（很少用）。
注：该方法只匹配一次。
eg:
if('mi-cr'.indexOf('-')==-1){
alert("必须包含'-'");
}

返回满足参数条件的第一个字符的所在位置:str.search(regexp)
接受一个参数，参数可以是正则表达式。
if('micr'.search(/[0-9]/)!=-1){
alert("不能包含数字");

}

返回和条件参数所匹配的字符，查到的内容会形成数组返回:str.match(regexp)
接受一个参数，参数可以是正则表达式。
如果查找的内容不存在，就会返回null
'micr123'.match(/[0-9]/g)    //['1','2','3']

替换相关的字符：str.replace(regexp | substr,newSubstr | function)
接受两个参数，第一个参数可以是一个正则，也可以是将要替换的字符串。
第二个参数是要替换成的字符串，或者是函数（函数很少用）。
该函数并不会去改变原有的字符串，而是返回一个全新的字符串。需要将返回的字符串重新赋值到新的变量上，才能正常的使用。
eg:
'micr123'.replace('123','###');    //micr###

查找字符串内指定位置的字符：str.substring(indexA[,indexB])
查找到的内容包含indexA,但是不包含indexB
如果只传入一个参数，就是从该参数到末尾。
eg:
'micr123'.substring(2,5)   //'cr1'

查找字符串内指定位置的字符：str.slice(beginSlice[,endSlice])
和substring基本相似，不同的地方是这个函数的参数可以传入负值。
eg:
'micr123'.slice(1,-1);     //'icr12'

查找字符串内指定位置的字符：str.substr(start[,length])
这个函数和substring的区别在于，这个第二个参数是一个长度。
就是从开始位置，取多少长度的字符。
eg:
'micr123'.substr(2,2);    //'cr'

按照分隔符分隔字符串：str.split([separator][,limit])
接收两个参数，第一个参数是按照什么分隔符来分隔。第二个参数是提取多少个内容（不常用）
参数可以接收正则表达式。
eg:
'micr 123'.split(' ');    //['micr','123']

全部转换成小写：str.toLowerCase()

全部转换成大写：str.toUpperCase()

特殊的符号需要转义：\
比如双引号内的双引号，反斜线后的反斜线
\t   会是一个tab符号
\n   会是一个换行


根据字符找位置：str.indexOf()  str.search()

根据字符找字符：str.match()   

根据位置找字符：str.charAt()  str.substring()   str.slice()   str.substr()

根据字符替换字符: str.replace()

根据符号分隔字符：str.split()


9、对象

创建对象：var car = new Object();       var car = {};

eg:
var car = {
	color:'red',
	run:function () {alert('run')}
};

car.color;   //"red"
car["color"] //"red"    这里可以用中括号的形式来访问值。
car.run();   //alert("run")   这里访问的方法需要加括号。
car["run"]() //alert("run")   这里可以通过中括号的形式来访问方法。记得也要加括号

如何给已有对象增加属性和方法：
eg:
car.type="SUV";
car.stop=function () {alert("stop")};

修改属性：
eg:
car.color="white";

删除属性：
eg:
delete car.color;
delete car.stop;   //如果要删除方法的话，是不需要加括号的，加了括号会删除失败。

构建该对象的构造函数：obj.constructor
eg:
car.constructor;   //Object

var num = new Number(123);
num.constructor;   //Number

将对象转换成字符串：obj.toString()

var num = new Number(123);
num.toString();    //"123"

获取对象原始值：obj.valueOf()
eg:
var num = new Number(123);
num.valueOf();      //123

查看自身是否具有某个属性和方法：obj.hasOwnproperty()    (必须是自身的属性，如果继承过来的也会返回false)
eg:
var car = {
	color:"red";
	run:function () {alert("run")}
};
car.hasOwnproperty("color");   //true
car.hasOwnproperty("logo");    //false


10、数组

获取数组中某个元素的位置：arr.indexOf(searchElement[,fromIndex=0])
接受两个参数，第一个参数表示要查找的元素，第二个参数表示查找的起始位置（不常用）。
这个只能查字符串所在位置，如果数组内是对象，是查不到的。

遍历数组并对数组内容执行回调函数：arr.forEach(callback[,thisArg])
接受两个参数，第一个参数是回调函数，第二个参数会替换掉回调函数里的this对象（不常用）。
这个是需要用回调函数的。
回调函数格式：function (item,index,array) {}    //必须写三个参数，可以不全部用到，但是必须要写。
                                                //第一个参数表示传入的元素，第二个是索引，第三个是数组。

将数组倒序排列：arr.reverse()

按照某个条件进行排列：arr.sort([compareFunction])
接受一个参数，参数就是可以形成条件的那个回调函数。
这个函数会改变原来的数组。
可以不传入参数，如果不传参数，会按照unicode的顺序来排序。
这个是需要用回调函数的。
回调函数格式：function(a,b){return a-b;}    //必须写两个参数。
                                            //两个参数表示比较的两个值，相减以后哪个小，将排在前面。
                                            //如果返回的是b-a，那么哪个大，将会排在前面。

向数组内末尾添加元素：arr.push(element1,element2...)

向数组内头部添加元素：arr.unshift(element1,element2...)

获取数组内第一个元素，并将数组内的第一个元素删除：arr.shift()

获取数组内最后一个元素，并将数组内的最后一个元素删除：arr.pop()

向数组任意位置删除并添加元素：arr.splice(index,howMany[,ele1[,ele2[,eleN]]])
接收三个参数，第一个参数表示索引位置，第二个位置表示删除多少个元素，第三个参数表示在当前位置插入的元素。
如果不传第三个参数，就表示只删除。如果第二个参数是0，就表示只插入，但是插入的元素在所在位置的前面。
注：这个方法其实可以做三件事：1、替换 2、删除 3、添加

reverse、sort、push、unshift、shift、pop、splice都会改变原数组。

复制数组内的元素：arr.slice(begin[,end])
开始位置包含，结束位置不包含。
结果进行再次赋值以后会形成新数组。

将数组做连接：arr.concat(value1,..,valueN)
参数不一定非得是数组，其它的元素也是可以连接的。

将数组以特定的字符连接成一个字符串：arr.join([separator])
如果不传参数，默认是以逗号分隔，如果传入空字符串，就直接连接了。

将原有数组数据修改以后形成一个新数组：这里就用一整套方法了。
创建一个新的空数组，然后先将原数组遍历(forEach)，回调函数里将原数组的内容进行修改，修改后添加到新数组内(push)。

将原有数组进行修改并形成新数组：arr.map(callback[,thisArg])
和forEach()相似，不同点在于这里循环以后得到的值会成形成一个新数组。赋值以后就可以使用。
回调函数格式：function(item,index,array) {return}   //记得这里要return

将数组内容累加：arr.reduce(callback,[initialValue])
可以用来处理每次遍历到的元素和上一次元素之间的关系。
接受两个参数，第一个参数是上一次处理以后得到的值。第二个参数是在第一次计算之前的第一个参数的初始值。
回调函数格式：function (previousResult,item,index,array){return previousResult + item.value};

slice、concat、join、map、reduce对原有的数组没有修改。

需要回调函数的几个方法：forEach()  sort()  map()   reduce()


11、函数

如果实参小于形参，那么未定义的形参将会取值undefined。
如果实参大于形参，那么多出来的实参函数将接收不到。但是如果想访问的话，arguments属性将可以访问的到。
arguments是一个实参的集合，通过循环可以访问到具体的实参。

函数的参数如果是原始类型的话，就是值传递。在函数处理完成以后，它并不会影响原来的参数。
函数的参数如果是对象类型的话，就是引用传递，在函数处理完成以后，原本的属性会受到影响。

作用域：
函数的创建的时候会生成一个作用域，会限定函数里面内容的作用范围。
当当前函数内存在该变量时，函数内的操作将会使用函数内的变量，如果函数内没有相关的变量，函数将会向外层查找相关的变量。

this:调用这个函数的对象

构造函数：
构造函数通过new调用以后：首先会创建了个对象 ，然后将函数的作用域赋给新对象，运行函数内的内容，返回新对象。
构造函数的调用：var point=new Point(1,1);   //注意，加了new的表示调用的是构造函数

原型：prototype
在这里，Point.prototype就是Point的原型。可以将这个构造函数一些通用的属性和方法放在这个原型上。
在创建好实例以后，实例会有一个隐藏的属性指向原型，然后就可以正常的调用原型里的属性和方法。
function Point(x,y) {

	this.x=x;
	this.y=y;
};

Point.prototype.move=function (stepX,stepY) {

	this.x+=stepX;
	this.y+=stepY;
};


12、Date

当前时间：new Date();

2014年12月5日：new Date(2014,11,5);      //月份是从零开始的

如果传入的参数不传天数，则会从第一天算起。

一些方法：分别获取年，月，日，小时，分钟，秒。
date.getFullYear();
date.getMonth();
date.getDate();
date.getHours();
date.getMinutes();
date.getSeconds();

一些方法：分别设置年，月，日，小时，分钟，秒。(接收到的参数是要设置的内容。)
date.setFullYear(2046);
date.setMonth(2);
date.setDate(15);
date.setHours(8);
date.setMinutes(16);
date.setSeconds(59);

如果设置的数字超过了，比如date.setDate(35);   这个设置的是天数，设置的是35天，当月走满，就会走下月。
注：这个并不是原有数字与设置数字相加，而是重置原有数字。

格式化日期：做一个函数，里面通过上面的方法获取到内容，然后通过在数字中间添加连接符来格式化时间。然后return。

给小于10的数字前面补零：
function padding(number) {

	return number<10?"0"+number:""+number;
}

如何获得某个月份的天数：设置时间为 new Date(2001,2,0) 
如果将时间的天数设置成0天，就会自动倒回上个月最后一天。然后获取天数，就会得到上个月的天数。

Date转换成Number: date.getTime();   //这个获取到的数字是当前时间到1970年1月1日的总时间。

Number转换成Date:
new Date(数字);   //将数字传入即可。   
date.setTime(数字)  //将数字传入setTime()

13、RegExp

正则表达式与指定的字符串是否匹配:regexObj.test(str)
/135/.test('135');    //true

锚点：匹配一个位置
^:起始位置
$:结尾位置
\b:单词边界（不常用）

字符类：匹配一类字符中的一个
[abc]:a或b或c
[0-9]:一个数字
[^0-9]:非数字的一个字符。  （如果"^"这个符号出现在中括号内的话，表示非）
[a-z]:一个字母
.:点号表示任一字符（换行除外）

元字符：具有特殊意义的字符

^ $ \b

\d:[0-9]         \D:[^\d]
\s:空白符        \S:[^\s]
\w:[A-Za-z0-9_]  \W:[^\w]

量词：出现的次数
{m,n}:m到n次   可以不带逗号只写一个数字，表示必须出现该数字次。
*:{0,}   //0次到无穷次
?:{0,1}  //0次到1次
+:{1,}   //1次到无穷次

转义符：\
需要匹配的字符是元字符。

多选分支：|
表达或的意思。
eg:
/thi(c|n)k/

如何获取地址栏里各部分的内容：


捕获：()
保存匹配到的字符串，日后再用。

不捕获：(?:)
注意：(?:https)  这样的是不捕获    （https?:）  这样的是s出现0-1次。

捕获与不捕获的使用：
$1、$2...
API参数或返回值。

str.match(regexp):
示例地址：http://blog.163.com/album?id=1#comment
捕获示例的各部分：
var reg=/(https?:)\/\/([^\/]+)(\/[^\?]*)?(\?[^#]*)?(#.*)?/;

str.replace(regexp,replacement)
替换一个子串。
eg:
str.replace(/(\d+)/g,'$1.00');   这里的$1表示获取到的内容所保存的变量。
第二个参数可以是字符串，也可以是函数。但是第二个参数中的 $ 字符具有特定的含义。它说明从模式匹配得到的字符串将用于替换。
字符	                替换文本
$1、$2、...、$99	与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。
$&	                与 regexp 相匹配的子串。
$`	                位于匹配子串左侧的文本。
$'              	位于匹配子串右侧的文本。
$$	                直接量符号。
eg:
在本例中，我们将把 "Doe, John" 转换为 "John Doe" 的形式：
name = "Doe, John";
name.replace(/(\w+)\s*, \s*(\w+)/, "$2 $1");

replace的第二个参数可以是函数，如果是函数的时候，匹配到的第一个字符会以参数的形式传进第二个函数内。

regexpObj.exec(str):更强大的检索
更详尽的结果：index
过程的状态：lastIndex

14、JSON
以文本的形式来描述数据。（IE6/7是不支持的，可以用自定义对象的方法来解决，需要用到eval方法。）

var jerry = {name:'jerry',age:1};

JS与JSON的区别在于JSON的对象属性需要用双引号引起来：、
eg:{"name":"jerry","age":1}

JSON转换成JS:JSON.parse(text[,reviver])
第一个参数是JSON对象或JSON文本，第二个参数是一个回调函数（不常用）。
注：JSON里的换行需要加“\”

JS转换成JSON:JSON.stringify(value[,replacer[,space]])
第一个参数是JS对象，后面两个参数可以用来只提取一部分对象属性进行转换（不常用）。

15、类型进阶

因为对象赋值给另一个对象只是将地址复制了过去 ，那如果真实的将一个对象复制出来呢？
百度一下，暂时不懂。、

哪些符号会涉及隐式类型转换：
数字运算符：当数字与字符串进行计算时，除了+号，其它的符号都会将字符串隐式的转换成数字类型。
.号：会将字符串转换成相关的对象类型。
if语句：将条件部分隐式的转换成布尔值。
==号：隐式的转换成布尔值。
注：undefined转换成数字类型为NaN    null转换成数字类型为0

类型识别：

输入格式：
'2015-08-05'
1438744815232
{y:2015,m:8,d:5}
[2015,8,5]
返回格式：Date
实现一下上面的需求的代码。
注：上面的代码实现的时候必须把数组放到对象的前面进行判断，因为数组也是对象，如果对象在前面，会卡住。
另外，因为是日期，所以月份获取到的数字需要减1，否则换算出来的月份会大一个月。
再另外，如果传入的参数不是这几个类型的，最后要return -1

类型识别的具体方法：

typeof:可以识别标准类型（string number boolean object undefined）（除了null以外,这个识别为object）
       不能识别具体的对象类型，除了function
       注：typeof()返回的类型是一个字符串并且是小写，如果要比较的话，另一边也必须是字符串也必须是小写。
操作方法：typeof("a")     typeof "a"

instanceof:可以判别内置对象类型（array regexp等），不能判别原始类型(number string等)，可以判别自定义对象类型。
注：instanceof的左侧是变量，右侧是类型，类型的首字母必须大写，且类型不能加引号。
总结：可以识别所有的对象类型。
eg:
[] instanceof Array;      //true
/\d/ instanceof RegExp;   //true
1 instanceof Number       //false
"jerry" instanceof String;//false

Object.prototype.toString.call():可以识别标准类型以及内置对象类型。无法识别自定义对象类型。
eg:
Object.prototype.toString.call(123);     //"[object Number]"
封闭这个方法：
function type(obj) {
	return Object.prototype.toString.call(obj).slice(8,-1);
}

constructor:可以判别标准类型（undefined/null除外），可以判别内置对象类型。可以判别自定义对象类型。
eg:
"jerry".constructor===String;    //true
(1).constructor===Number;        //true
true.constructor===Boolean;      //true
({}).constructor===Object;       //true

new Date().constructor===Date;   //true
[].constructor===Array;          //true

封装constructor:getConstructorName
function getConstructorName(obj) {
	return obj && obj.constructor && obj.constructor.toString().match(/function\s*([^(]*)/)[1];
}

16、函数进阶

函数声明：function a() {}
函数表达式：var a=function () {}

函数声明和函数表达式的区别：
函数声明可以在该函数之前进行调用。而函数表达式必须在该表达式之后进行调用。
同样，对象实例化也要在函数实例化之后进行调用。

对象实例化与函数声明、函数表达式的区别：
通过对象实例化所定义出来的函数都会定义在全局作用域上，所以不能访问定义的位置的父级的变量。

如果打印变量：console.log("abc");
如果打印对象：console.dir(abc);

构造函数与普通函数的区别：
本质上没有区别。
构造函数通常会有this指定实例属性，原型对象上通常有一些公共方法。
构造函数命名通常首字母大写。


函数调用（按this分类）：

构造函数调用模式：this指向调用构造函数的那个实例。

方法调用模式：对象在调用方法函数的时候，this指向该对象。

函数调用模式：
如果函数内存在子函数，那么子函数的this将指向window
如果真的需要函数内的子函数的this指向父级，那么可以通过的父级var that=this;来修改this的指向（闭包）。

apply(call)调用模式：Function prototype.apply
函数借用的一个方法。
假如A有一个函数，B没有这个函数，就可以让B借用到A的这个函数。
接收两个参数，第一个参数是谁来借（这个对象），第二个参数是一个数组，里面是变化的数据。
eg:
p.move.apply(circle,[2,1]);   //{x:3,y:2,r:1}

call的话和apply效果类似，但是第二个参数不是数组，而是一个字符序列。

Function.prototype.bind:
指定了一个函数的this和函数的实参，然后返回一个函数的引用（不会立即执行，需要调用）。
接收若干个参数，第一个参数是this的指向，剩下的参数是本函数的参数。
eg:
var circlemove = p.move.bind(circle,2,1);
circlemove();

思考：为什么JS中需要apply 

函数调用（按arguments分类）：

Array-like
-arguments[index]:可以通过这种形式访问里面的内容。
-arguments.length:可以通过这种形式访问具体的实参数量。
将类似数组的内容转换成真实数组：Array.prototype.slice.apply(arguments);
Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组

arguments.callee:实现一个递归，用的不多，了解一下。

递归：
function fac(i) {
	if(i=0) {
		return 1;
	}                  //记得要加一个非常明确的退出条件。
	return i*fac(i-1);
}

闭包（函数内部调用函数）：
好处：1.希望一个变量（定义变量或者形参）长期驻扎在内存当中。 2.避免全局变量的污染。
eg:
function aaa () {
	var a=1;
	return function bbb() {
		a++;
		alert(a);         //因为函数bbb要调用aaa的变量，所以a变量不能被垃圾回收，就会长期驻扎内存。
	}                         //而变量a又是局部变量，就可以防止全局污染。
}
var b=aaa();
bbb();

eg2:
var aLi=document.getElementsByTagName("li");
    for(var i=0;i<aLi.length;i++){
        (function (i) {
            aLi[i].onclick=function() {
                alert(i);
            };
        })(i);                                   //这样可以将循环里的变量i保存下来。
    }

闭包注意事项：
闭包容易引起IE下的内存泄露：（外部的DOM元素发生一个事件，事件是一个函数，函数内部再引用外部的DOM元素的内容）
内存泄露：因为引用的问题，导致内存没办法释放，只有在关闭浏览器的时候才会释放。
eg:
var oDiv=document.getElementById("div1");
oDiv.onclick=function () {
	alert(oDiv.id);           //这样就会内存泄露。
}
解决办法：
window.onunload = function () {
	oDiv.onclick=null;
}

隐藏、封装（模块化代码）：可以将变量a隐藏到函数内，防止全局污染。
eg:
(function () {
	var a=0;
	function b() {
		a=1;
		debugger;	
	}
	b();
})();
记忆函数（这个记忆函数看不懂）：
// // 记忆函数
// var factorial = (function(){
//   var memo = [1];
//   var count = 0;
//   var fac = function(i){
//     count++;
//     var result = memo[i];
//     if(typeof result === 'number'){
//       console.log('调用次数：' + count); 
//       return result;
//     } 
//     result = i*fac(i-1);
//     memo[i] = result;
//     return result;
//   }
//   return fac;
// })();
// for(var i=0;i<=10;i++){
//   console.log(factorial(i)); 
// }


First-class function（函数可以被当作变量保存，当作参数传递，当作返回值返回。）:
curry:(函数柯里化)（这里没有看懂。）：
// // curry函数柯里化
// function add(value){
//    var helper = function(next){
//       value = typeof(value)==="undefined"?next:value+next;
//       return helper;
//    }
//    helper.valueOf = function(){
//      return value;
//    }
//    return helper
// }

回调（比如AJAX的异步回调）：

debugger:手动的给代码打造一个断点。进行调试。

17、原型：

原型：

原型VS类：
类是通过抽象的对象构造出一个具体的对象。
原型是通过具体的对象构造出另一个具体的对象。

设置对象的原型：
Object.create(proto[,propertiesObject]):
接受两个参数，第一个参数是一个对象，作为新创建对象的原型。第二个参数是对象的属性定义（不常用）。
这个是创建的实例里面自带__proto__属性指向原型。
eg:
var landRover = {
	name:'landRover',
	start:function () {
		console.log('%s start',this.logo);	
	}
}
var landWind = Object.create(landRover);
landWind.logo = 'landWind';
landWind.start();

构造函数：
使用prototype设置原型：
使用new创建对象：
这个创建的实例里面自带__proto__属性指向原型的prototype属性。
步骤：1，创建对象landRover  2，设置landRover的__proto__   3,Car.apply(landRover,arguments)
eg:
function Car(logo) {
	this.logo = logo || 'unknown name';
}
Car.prototype = {
	start:function () {
		console.log('%s start',this.logo);
	},
	run:function () {
		console.log('%s running',this.logo)
	}

}

var landRover = new Car('landRover');
landRover.start();

原型链：

访问属性：要根据原型链一点一点的找到顶端。

修改属性：只会修改实例本身的相关属性，如果本身没有相关的属性，会自行创建并赋值。

删除属性：只会删除实例本身的相关属性。如果本身属性删除，而原型上存在，再次删除是没有效果的。

hasOwnProperty:
对所传入的属性参数进行判断，看是不是属性自身的属性，如果是返回true,如果不是返回false.
eg: landRover1.hasOwnProperty('serialno');  //true

最后，所有的构造函数都是通过function创建的，所以所有的构造函数都指向function.prototype
而function又是object，所以最后所有的实例都会具有object的prototype属性。

18、变量作用域
生命周期：
作用范围：

静态作用域（代码编译后就决定了作用域）：在代码编译完成的时候，就已经定了作用域，而不是根据运行先后定义作用域。

动态作用域（代码运行时决定作用域）：

JS变量作用域：
JS使用静态作用域
JS没有块级作用域（用的最多的是全局作用域、函数作用域等）
ES5中使用词法环境管理静态作用域。

词法环境：
环境记录（形参、函数声明、变量）
对外部词法环境的引用（outer）

环境记录初始化（声明提前）(最普通的词法环境)：
代码会以最普通的顺序来进行执行。如果函数内部套有函数的话，第一遍定义的时候里面的函数并不会被定义
而是在第一遍定义完成以后，运行到里面套有的函数的时候，才会定义里面的函数。
并且如果套有函数内部再套有函数声明的话，函数还会提前。
在代码编译完成以后，没有执行之前，用var定义的变量都是undefined,在运行的时候才会进行赋值。

function f() {}       //函数声明
(function () {})();   //函数表达式
(function foo(){});   //函数表达式  

词法环境-with（特殊的词法环境）:
with会将条件定义到临时环境中。
函数声明在定义的时候已经将声明提前定义到了全局环境中，而不是with的这个临时环境中。因为临时环境是在运行的时候才形成的。
函数表达式是在运行的时候进行定义的，所以定义的环境是with的临时环境中。（先定义的临时环境，再定义的表达式）
所以函数声明调用的变量会是全局环境中的变量，而不是临时环境中的变量。而函数表达式调用的变量会是临时环境中的变量。


词法环境-try...catch(特殊的词法环境):
try会将抛出的错误定义到临时环境中。
同上，注意函数声明和函数表达式的区别。

带名称的函数表达式：
这个是特殊情况，带名称的函数表达式依然是表达式，所以不能定义到全局，会形成临时环境。
但是因为带了名称，所以A是不能被修改的。所以执行的时候，弹出来的依然是函数本身。
eg:
(function A() {
	A=1;
	alert(A);
})();

自己做的试验：
试验一：（这是函数声明的例子）
var x=10;
    function foo () {
        alert(x);
    };
    function bar () {
        var x=20;
        alert(x);
        foo();
    }
    bar(); 

//弹出的两个值分别是20   10
自我分析：因为该例里面定义的函数是函数声明，函数声明在定义的时候就会定义好作用域，并不会根据调用的顺序改变，所以foo函数调用的X是全局作用域中的X。

如果函数是函数表达式，那么定义的时候是不会提前的，所以如果在表达式运行之前改变了其它的变量或者作用域（with/try,catch）的话，函数表达式内部的变量也会受到影响。
函数表达式的例子可以看一下with和try的那部分。
with里面如果是函数声明的话，调用的变量会调用全局变量，如果是函数表达式的话，调用的变量就是临时环境里的变量(with条件里)。
这就是因为函数声明会提前 ，会提前到创建临时环境之前，所以他调用不到临时环境里的变量。
而函数表达式因为在临时环境创建之后，所以可以调用到。

19、闭包

闭包的应用：保存现场、封装

保存现场：
错误的例子：
function addHandlers(nodes) {
	for(var i=0;i<nodes.length;i++) {
		nodes[i].onclick = function () {
			alert(i);
		}
	}
}

正确的例子：
function addHandlers(nodes) {
	function helper(i) {
		return function() {
			alert(i);
		}
	}
	for(var i=0;i<nodes.length;i++) {
		nodes[i].onclick = helper(i);
	}
}
解析：当函数开始运行时，首先定义了函数helper和循环，循环开始给DOM加点击事件，每循环一次，就会生成一个新的helper。
每个helper都会将一个新生成的i变量传入，因为闭包的原因，传入的i会永远的驻扎在内存当中，alert的时候就可以调用到。


模块封装：
可以让内部的函数访问变量，而外部的不能访问变量。做到只对外部暴露接口。
因为闭包的原因，只让内部的函数访问该变量，而外部不能访问到，又因为return的函数的愿意，就可以对外部暴露内部函数的接口。

20、面向对象：
面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。

从方法学的角度可以认为：
1、面向对象的方法是面向对象的世界观在开发方法中的直接运用；
2、它强调系统的结构应该直接与现实世界的结构相对应，应该围绕现实世界中的对象来构造系统，而不是围绕功能来构造系统。

全局变量：
封装：
继承：

全局变量（定义全局变量的三种方式）：

var test = 'some';

window.test = 'some';

(function() {
	var a;
	test = 'some';	
})();

function () {
	var a=test='some';    //这里a是定义的局部变量，但是test是定义的全局变量。
}     

信息隐藏：
要注意对全局变量的隐藏，只留下公有的属性和方法给外部调用，其它的不需要的属性和方法进行私有化。

封装：一般都是用函数进行封装。

类继承：

原型继承：























 





















































































































