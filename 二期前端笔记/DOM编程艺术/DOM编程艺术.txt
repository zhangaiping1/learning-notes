1、文档树

2、节点操作

根据CSS选择器获取元素（querySelector）
querySelector:只返回第一个查找到的节点。
querySelectorAll:返回所有符合条件的节点。
接收的参数是CSS选择器。
eg:
var list = elm.querySelectorAll('#md .top .act,.foot');

创建节点：
createElement:
innerHTML:如果给添加的节点添加事件，只能通过onclick的方式在HTML里添加。而不能使用addEventLisner来添加。

插入节点：
appendChild:插入到尾部 eg: parent.appendChild(newElm);
insertBefore:插入到某个节点之前  eg: parent.insertBefore(newElm,rElm);   //rElm:插入到这个节点之前
insertAdjacentElement:插入一个元素节点，插入到某个元素的开标签之前、之后，闭标签之前、之后。
格式：elm.insertAdjacentElement(sWhere,oElm);   
sWhere:beforeBegin  afterBegin  beforeEnd   afterEnd   elm:参照节点    oElm:要插入的元素    
insertAdjacentHTML:插入一个带标签的字符串。（因为效率问题（隐式类型转换），不太建议。）
eg:
var str = '<span>abc</span>';
p.insertAdjacentElement('afterBegin',str);

文档上的所有节点类型都是由HTMLElement派生出去的。所以他们的原型都是HTMLElement.prototype

修改节点：
innerHTML:
textContent(innerText，这个需要兼容)(修改文本内容):

在对象定义后通过Object的__defineGetter__、__defineSetter__方法来追加定义
例如我们给Date对象添加一个year属性： 
Date.prototype.__defineGetter__('year', function() {return this.getFullYear();});     
Date.prototype.__defineSetter__('year', function(y) {this.setFullYear(y)});     

var now = new Date;     
alert(now.year);     
now.year = 2006;     
alert(now);    


删除节点：(删除之前记得将节点上的事件移除掉，然后进行删除的操作)
removeChild(删除某个子节点，返回删除的节点): eg: parent.removeChild(child);
另可以只需要传入一个被删除的节点参数，就可以删除该节点：
function remove(elm) {
	elm.parentNode.removeChild(elm);
}
      
replaceChild（替换节点，返回值是被删除的节点）:  eg: parent.replaceChild(newChild,oElm);
newChild:需要插入的节点   oElm:需要删除的节点  

3、属性操作

property accessor
getAttribute/setAttribute
dataset

property accessor(属性访问器):
读：eg: input.value;
写：eg: input.value='wwq@163.com';
好处：获得的都是实用对象，比如class获得的就是字符串，length获得的就是数值型。
坏处：通用性差，因为名字有一些不一样。比如className  htmlFor等。
      扩展性差，HMTL里添加属性，DOM里就需要添加内容。

g/setAttribute:
读：elm.getAttribute(attributeName)
写：elm.setAttribute(name,value);
好处：通用性好，名字不会有异常问题。
坏处：访问到的都是属性的字符串。

以上两种：纯字符串操作，选择setAttribute  ，如果涉及到实用属性操作，则选择属性访问器。

dataset:

HTMLElement.dataset
data-*属性集
eg:<div data-id = '123456' data-account-name = 'wwq'>wwq</div>
   div.dataset.id  //123456
   div.dataset.accountName   //wwq
data-*的用处：元素上保存数据
用处：用户的卡片信息
比如放到一个用户的名称上，然后显示一个像名片一样的信息表。这些信息就可以以自定义的方式来写入HTML，然后用dataset来获取。

4、样式操作

对于外链样式和内联样式的访问：
element.sheet.cssRules[0].style.lineHeight

对于行内样式的访问：
element.style.color

对于一次性设置CSS多个属性：
element.style.cssText = 'border-color:red;color:red;';

如何更好的将样式分离出去(更新CSS最好的方法)：
更新class:
eg:
element.className += 'invalid';

怎么样更换更多的样式：更换样式表
给链接上加个ID,然后获取到以后通过ele.href = 'xx.css';就可以达到更换样式表。

获取样式：
element.style:只能获取到行内样式。

如何获取到所有的实际的样式值：
var style=window.getComputedStyle(element[,pseudoElt])  //这个方法IE8及以下不支持
接受两个参数，第一个参数是要获取样式的元素，第二个参数是伪类。
eg:
window.getComputedStyle(element).color;    //'rgb(255.0.0)'

IE9以下解决办法：
element.currentStyle:

5、事件

事件流：
capture phase(捕获)
target phase(目标)
bubble phase(冒泡)
从window开始： window-document-html-body-... -目标元素的父节点 (捕获)
从目标元素的父节点开始： 父节点-目标-父节点（目标）
从目标元素的节节点开始： 父节点-...-body-html-document-window  (冒泡)

并不是所有的浏览器都有这三个过程，比如IE的低版本浏览器没有捕获过程
并不是所有的事件都有这三个过程，比如有一些事件没有冒泡过程。比如页面的load事件就没有冒泡过程。

事件注册与触发：

事件注册：
eventTarget.addEventListener(type,listener[,useCapture])
eventTarget:DOM元素  type:事件类型  listener:事件处理函数  useCapture:是否为冒泡时处理
默认是冒泡时处理(false)，如果是ture，会是捕获时处理）

另外还有一种方法：eventTarget.onclick=function () {}  //缺点：这种方法只能注册一个事件。

取消事件注册：
eventTarget.removeEventListener(type,listener[,useCapture])


事件触发(确定触发方式)：
eventTarget.dispatchEvent(type)
eg:
elem.dispatchEvent('click');

关于IE6\7\8的浏览器兼容性：
首先：IE的浏览器注册事件需要带on ,例：elem.attachEvent('on'+click,listener);
事件注册与取消：
attchEvent/detachEvent:
事件触发：
fireEvent(e)

IE6\7\8没有捕获阶段，因此就没有第三个参数。

标准方法与IE下的方法不同之处在于：
标准方法对节点添加事件以后，执行顺序为添加事件的顺序。
IE下的方法对节点添加事件以后，执行的顺序为添加事件顺序的倒序。

事件对象(event)：
function clickHandler(event) {};

关于IE兼容性：
IE低版本浏览器不是简单的event对象，他会将event放到window中。因此需要兼容一下。
function(event) {
	event = event || window.event;
}
当浏览器查不到event时，则查找window.event

事件对象的属性和方法：
属性：
type:事件类型
target(srcElement):事件触发节点
currentTarget:当前处理的事件节点。

function eventHandler(e){ 
//获取事件对象 
e = e || window.event;//IE和Chrome下是window.event FF下是e 
//获取事件源 
var target = e.target || e.srcElement;//IE和Chrome下是srcElement FF下是target 
} 


方法：
阻止事件传播：
event.stopPropagation(); (W3C)（阻止冒泡）
event.cancelBubble = true (IE) (IE下的阻止冒泡)
event.stopImmediatePropagation() (阻止冒泡并阻止该节点的后续事件)

什么时候用阻止事件冒泡？

例如：document上有A事件，div有B事件，div里面的span有C事件，如果不给span和div加阻止事件冒泡的话，点击span时就会触发到div的B事件、document的A事件，
当点击span时不想触发div和document的事件就要加上阻止事件冒泡，div也是一样的道理。

默认行为：
event.preventDefault() (W3C)
event.returnValue = false (IE)

事件分类：

事件          UI事件         焦点事件          输入事件          键盘事件             鼠标事件        滚轮事件
Event         UIEvent        FocusEvent        InputEvent        KeyboardEvent        MouseEvent      Wheel Event
load          resize         blur              beforeinput       keydown              click           wheel
unload        scroll         focus             input             keyup                dbclick         
error                        focusin                                                  mousedown
select                       focusout                                                 mouseenter
abort                                                                                 mouseleave
                                                                                      mousemove
                                                                                      mouseout
                                                                                      mouseover
                                                                                      mouseup

event:(不冒泡)
unload:卸载的事件，比如一个链接连接到其它页面，点击这个链接的时候，就会触发这个事件。
select:选择的事件，比如在textarea里选择一段文字的时候。
abort:取消的事件，比如说图片在加载的时候被取消了，就会发生这个事件。
error:出错的时候发生的事件。
eg:<images src="xxxa.jpg" onerror = "this.src = 'xxxb.jpg'"/>

UIEvent:
resize:改变window或者iframe大小的时候触发。不冒泡。
scroll:滚动的时候触发。事件在window,document时不冒泡，在div时会冒泡 。

MouseEvent:
mouseenter和mouseover的区别：
mouseover在嵌套的子元素上也会触发，但是mouseenter只会在本身元素上触发。
mouseout他mouseleave同上。

除了mouseenter和mouseleave不冒泡以外，其它的全部冒泡。

MouseEvent对象：
属性：
clientX,clientY  //到页面边界的距离
screenX,screenY  //到屏幕边界的距离

ctrlKey  shiftKey  altKey  metaKey   //鼠标点击的时候，如果ctrl键是按下去的，那么ctrlKey的值就是trul,以此类推。

button(0,1,2)     //按下的是鼠标的哪个键

MouseEvent顺序：
从元素A上方移过：
mousemove-mouseover-mouseenter-mousemove-mouseout-mouseleave
点击元素：
mousedown-[mousemove]-mouseup-click

例子-拖拽DIV
HTML：绝对定位并设置好TOP和LEFT
JS：鼠标按下，鼠标拖拽，鼠标弹起

WheelEvent滚轮事件:
属性：
deltaMode:
deltaX:
deltaY:
deltaZ:

FocusEvent:不冒泡
blur:失去焦点触发
focus:获得焦点触发
focusin:即将获得焦点触发
focusout:即将失去焦点触发

属性：
relatedTarget:主元素对应的另一个副元素。比如blur，某个元素失去焦点触发blur，那肯定会有另外一个元素获得焦点，这个元素就是relatedTarget

InputEvent:冒泡
beforeinput:即将输入之前触发
input:内容输入后触发
IE的低版本下没有InputEvent事件，一般用onpropertychange(IE)来处理。

KeyboardEvent:冒泡
属性：
key:
code:
ctrlKey  shiftKey  altKey  metaKey
repeat:持续按一个键这个会是true

事件代理：

将事件注册到元素的父节点上，到时候冒泡的时候自然会访问到。

好处：如果子元素过多，注册一个事件的话，注册到父元素会方便。
坏处：如果事件过多，全部注册到顶端元素上，会不好管理。

6、数据通信

HTTP协议：

常见的HTTP状态码：
200     请求成功，一般用于GET和POST方法
301     资源移动。所请求资源自动到新的URL，浏览器自动跳转到新的URL。
304     未修改。所请求资源未修改，浏览器读取缓存数据。
400     请求语法错误，服务器无法理解。
404     未找到资源，可以设置个性404页面
500     服务器内部错误。

HTTP协议在前端中的应用--AJAX：

open()是开始一个请求，但并未发送。
send()是发送请求。

当XHR对象创建好以后，readyState的值为0，open()以后值为1，send()以后值为2，服务器返回请求以后值为3，当全部返回以后值为4。
当全部返回以后，status值为200，responseText值为返回的数据。

三步走：创建XHR对象--发送请求--处理返回数据

open:
xhr.open(method,url[,async = true]);
method:请求的方式 
url:请求的资源相对于当前文件的地址
注：如果这个地址是一个文件加上查询参数，那么GET的参数应该这样写：
xhr.open('get','example.json?'+'name1=value1&name2=value2',true)
参数应该跟在URL之后。如果参数是一个对象的话，需要先将对象转换成这种参数，跟在URL之后。（转换函数这一课第二个里有。）
如果是POST的参数，文件还在URL里，但是查询参数应该放到send()的参数里。
async:同步还是异步，默认是true(异步)。false:同步


setRequestHeader:(open后跟上)
xhr.setRequestHeader(header,value);

send:(发起请求)
xhr.send([data = null])



同源策略：
相同的协议，相同的端口，相同的主机，就是同源。

跨域资源访问：（如果不是同源，就是跨域。）
跨域资源访问三方法：
CORS:
Frame代理：
JSONP：通过script标签跨域
首先创建一个script标签，然后将跨域的地址写入src地址中。然后将这个标签插入到body中。就会可以生成一个JSON.JS类似的文件。就可以用了。

7、数据存储

cookie:cookie的增删查改

storage:storage的增删查改，这个有一些API的方法，可以用于增删查改。
             -localStorage                                      -sessionStorage
有效期：     永久有效                                            浏览器绘画完成即销毁

8、动画

三要素：
对象：DOM
属性：width height opacity left
定时器：setInterval setTimeout requestAnimationFrame

setInterval:
var intervalID = setInterval(func,delay[,param1,param2,...])  //每过delay毫秒就会触发一次。可以触发无数次。
clearInterval(intervalID)                                     //在执行之前传入ID值可清除定时器

setTimeout:
var timeoutID = setTimeout(func,[delay,param1,param2,...])    //若干时间以后执行一次。只执行一次
clearTimeout(timeoutID)                                       //在执行之前传入ID值可清除定时器

requestAnimationFrame:
var requestID = requestAnimationFrame(func)                   //执行时间由浏览器刷新频率决定，每当浏览器刷新一次，他就执行一次。
                                                              //（现在显示器刷新频率约为60次/秒）
cancelAnimationFrame(requestID)                               //在执行之前传入ID值可清除定时器

9、音频与视频

audio:
<audio src='xxx.mp3'></audio>
audio兼容：
<audio>
<source src='xxx.mp3'>
<source src='xxx.wav'>
<source src='xxx.ogg'>
</audio>

video:
<video src='xxx.mov' width=320 height=240></video>
video兼容：
<video>
<source src='xxx.webm'>
<source src='xxx.mp4'>
</video>

音频：http://en.wikipedia.org/wiki/HTML5_Audio#Supported_audio_coding_formats
视频：http://en.wikipedia.org/wiki/HTML5_video#Browser_support

多媒体格式兼容性：
音频：
var a new Audio();
a.canPlayType('audio/nav');    //如果支持则会返回'maybe'或'probably'，不支持会返回空。

视频：
因为视频没有构造函数。所以如果想检测视频的话，需要在浏览器内插入video标签，然后获取到再检测。

多媒体相关事件列表：http://www.w3.org/wiki/HTML/Elements/audio#Media_Events

W3C官方定义：http://webaudio.github.io/web-audio-api/
mozilla官方教程：https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API
第三方教程：http://www.html5rocks.com/en/tutorials/webaudio/intro/,http://webaudioapi.com/

10、canvas  这里需要再找资料。

<canvas id='tutorial' width='300' height='150'></canvas>

渲染上下文对象：
var canvas = document.getElementById('tutorial');
var ctx = canvas.getContext('2d');

globalCompositeOperation:在正式绘画之前需要确定绘画图形的顺序。
ctx.globalCompositeOperation = 'destination-over';

基本绘图的步骤：
清除画布--绘制图形--保存渲染上下文状态--绘制图形--恢复渲染上下文状态

Mozilla官方教程：https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial

11、BOM

navigator:浏览器信息
location:浏览器定位和导航
history:窗口浏览器历史
screen:屏幕信息

navigator:
-platform:运行平台
-userAgent:浏览器信息，用来判断客户用的是什么浏览器，判断内核就可以了。

location:
-href:浏览器的地址

screen:
-availHeight:浏览器显示高度
-height:显示器显示高度

12、表单操作(如何通过form标签来访问标签内的子元素)(平时那些选择器都是写死的，如果想做级联下拉选择器等活的，就得用DOM来操作表单。)（这里需要以后继续查资料并多实践。等查的感觉差不多了，再回来学一遍）

构建表单--服务器处理--配置表单

form元素的一些属性：

form.elements:符合以下类型任意一个，就在这个集合中。
-该表单子孙表单控件（除图片按钮）
-归属于该表单的表单控件（除图片按钮）
eg:
<form id='f'></form>
<p><label><input name="d" form="f"></label></p>

图片按钮：<input type='image'>

form.length:  elements.length

以上的元素都属于elements这个集合，那么如果将这个集合里面的元素取出来呢：
<form name='test'>
<input name='a'>
<input name='b'>
</form>
取出name为a的input，以下四种方法都可以取到：
testForm.elements[0];
testForm.elements['a'];
testForm[0];
testForm['a'];

form[name]:
-返回ID或name为指定名称的表单控件（除图片按钮）
-如果结果为空，则返回ID为指定名称的img元素
eg:
<form name='test'>
	<img id='a' src='./test.png'/>     //testForm['a']  ，当这样的时候，取到的是<input name='a'/>
	<input name='a'/>                  //当<input name='a'>被删除时，上一行的取值会取到id=a的<img>元素
</form>

-如果有多个同名元素，则返回这些元素的动态节点集合。
-曾经用指定名称取过该元素，则不管该元素的ID或者name怎么变化，只要节点还在页面上均可使用原名称获取该元素。
eg:
<form name='test'>
	<input name='b'/>
</form>
testForm['a'];
testForm.elements['a'];
testForm['a'].name='b';
testForm['a'];           //以前取到过这个元素，然后改变name值为b，然后用a还是可以取到该值的。
testForm.elements['a'];  //但是如果还用elements来取这个值的话，会是null

form的几个常用接口：reset()   submit()   checkValidity()

reset():
-可重置元素：input keygen output select textarea
-触发表单reset事件，阻止该事件的默认行为可取消重置。
-元素重置时不再触发元素上的change和input事件。
例：可以用来删除文件选择器选中的文件。


label的一些属性：

htmlFor:
-关联表单控件激活行为，点击label区域可以激活表单控件的行为。
-可关联元素：button input(除hidden之外) keygen meter output progress select textarea
例：label除了可以修改触发区域外，还可以个性化的定制，比如按钮改成图片。

form:
-关联归属表单
-可关联元素：button fieldset input keygen label object output select textarea
-只读属性，不可在程序中修改。
如果要修改：label.setAttribute('form','newFormId');


input的一些属性：

type:
-控件外观：
-数据类型：
-默认为text:

关于input小例：本地图片预览：
-onchange:
-accept:
-multiple:
-files:


select的一些属性：

name value multiple options selectedOptions selectedIndex add(element[,before]) remove([index])

创建选项：
-document.createElement
-new Option([text,[,value[,defaultSelected[,selected]]]])

添加选项：
-insertAdjacentElement
-select.add

删除选项：
-removeChild
-select.remove

小例：级联下拉选择器：
-onchange
-remove
-add


textarea的一些属性：

name value select() selectionStart selectionEnd selectionDirection setSelectionRange(start,end[,direction])
setRangeText(replacement[,start,end[,mode]])

小例：艾特别人
-oninput
-selectionStart
-setRangeText


验证：
验证元素：
-可验证元素：button input select textarea
-以下情况不做验证
input元素类型为hidden  reset  buttion时，不验证
button元素类型为reset  button时，不验证
input和textarea元素有readonly时，不验证
作为datalist的子孙节点时，不验证
disabled时，不验证

在相应的元素上调用以下属性和接口做验证：
willValidate
checkValidity()
validity
validationMessage
setCustomValidity(message)

验证：validity

自定义异常：
-oninvalid
-setCustomValidity  //自定义异常时候的提示。

禁止验证：
在form上添加novalidate属性


提交：
隐式提交
-如：聚集在输入框时按回车提交表单：
-满足以下任一条件：
表单有非禁用的提交按钮。
没有提交按钮时，只有一个类型为text search url email password date time number 的input元素，也可以。

提交过程：
-根据表单enctype指定的值构建要提交的数据结构。
-使用method指定的方式发送数据到action指定的目标。

构建提交数据：
-从可提交元素中提取数据组装成指定的数据结构的过程
-可提交元素：button input keygen object select textarea

编码方式（enctype）：
-application/x-www-form-urlencoded [默认]         //提交上去的是以&符号分隔的间值对。  a=a&b=b&c=c
-multipart/form-data                         //以字节流的方式发送到服务器。文件上传常用的方式。
-text/plain                   //提交的是以回车换行符分隔的间值对。  第一行：a=a  第二行：b=b  第三行c=c 适合人阅读

特殊案例：
-<input name='isindex' />  当这个元素作为form的第一个元素时，提交以后只会显示值，不会显示name
如果想正常，将这个元素放到第二个位置就行。

-<input type='hidden' name='_charset_' />  当该元素没有设置value值，提交时value自动用当前提交的字符集填充。
结果 _charset_='UTF-8'

submit()
-提交表单   form.submit();

onsubmit
-表单提交事件
-提交之前的数据验证
-阻止事件的默认行为可取消表单提交。

小例：无刷新表单提交
-form
-target
-iframe


表单应用的完整的例子：


13、列表操作（相当于一个完整的列表的例子）（一样，多查资料多实践。查的差不多再回来学一遍）

面向视图：

面向数据：


14、组件实践（这里的例子需要以后做的多了，再回来看。等到自己感觉能做的时候，再回来看。两个例子，一个是弹窗，一个是轮播）

各种组件：（可以拿来练手）
mask datepicker carousel modal pager editor

目标：
理解常规的组件实现流程：
巩固前置课程的部分知识：
避免常见误区：

理解常规的组件实现流程：
-分析：交互意图以及需求
-结构：HTML+CSS实现静态结构
-接口：定义公共接口
-实现：从抽像到细节，实现功能接口、暴露事件
-完善：便利接口、插件封装、重构等

modal:(弹窗&模态)
模态是最常用的组件，它通过弹出一个高聚集性的窗口来立刻捕获到当前用户的注意力。

-需求分析：
模态窗口垂直水平居中
需要半透明的遮罩背景
可自定义弹窗内容和标题
提供确认和取消操作

-页面--结构分解：
有一个按钮，按下去弹出窗口
底层是一个遮罩层
然后是窗体，窗体上有顶部，内容，底部三个区

HTML：注意结构的模块化

-定义公共接口：
初始化modal
方法调用

-实现思路：从抽象到细节

-不足之处：
没有过渡动画，体验不佳
缺乏组件事件支持
窗口在内容过高时会失效

不足之处解决办法：

动画流程：使用css3 animation

心得：对DOM的操作并不是直接用方法去操作，而是将方法都封装到一个自定义的函数内，然后每次调用这个函数。
      注意方法的兼容性处理，其实主要还是浏览器私有前缀的处理。
一个CSS动画网站，很多动画都可以直接引入，很方法：
daneden.github.io/animate.css/

使用事件Mixin

要点总结：基于“类”组织
要点总结：结构复用


carousel（轮播）：

-需求分析：
滚动内容垂直水平居中
滚动条目数不受限制
前后翻动，并支持拖拽
可直接定位

-页面结构分解

-公共API接口

-实现要点：数据定义

-数据驱动的UI开发
将UI抽象为数据，是保证组件可测性的关键一步
更易维护，只需关注单一入口 _calcSlide

关注一下react

-不足
需求的手提仍未实现
自动运行与手动切换的冲突未解决
如果持续调用next和prev将导致偏移非常大


流程回顾:
分析：交互意图以及需求。不要急于上手，可以先做细节，然后将细节组织到一起，就可以实现功能。
结构：HTML+CSS实现静态结构
接口：需求的代码层抽象，指导实现。
实现：从抽象到细节，实现功能接口，暴露事件。
完善：便利接口，插件封装，重构等。
































































































