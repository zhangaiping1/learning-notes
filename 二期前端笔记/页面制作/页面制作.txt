2、工具、面板、视图

工作区是可以存储的，这个不错。

3、测量、取色

按住shift键是加选，按住alt键是减选。

左边拉个小框，右边拉个小框，显示的宽度就是左右的总宽度。

4、切图

修饰性的图片用background。  内容性的图片用img标签。

修饰性的图片存为png， 内容性的图片存为jpg。

切图标，可以先框一个大概范围，然后用魔棒减选。

切片工具适合于可以一刀切的活动页。

5、保存

6.修改、维护

7、图片的优化与合并

图片路径格式：background:url(images/btn.jpg) no-repeat 0 0;

因为引入方便，浏览器有并行文件数等原因，所以才会进行图片的拼合。

压缩图片工具：

无损：minimage       有损：tinypng

图片之间必须保留空隙，防止图标有想要放大的需求。

浏览器兼容方案：

IE6不支持半透明：可以存两份文件，高级的浏览器用PNG24，低级的浏览器用PNG8。

CSS3：高级的浏览器用CSS3，低级的浏览器用切的图片。

优雅降级：比如高级浏览器是圆角，那低级的浏览器就让他是直角。

8、开发、调试工具

调试工具--点击放大镜--点击元素--可以看到该元素的代码。

IE的调试：IE8以上都带有调试工具。IE6则需要安装原生的浏览器并安装调试工具。如果只是想看的话就装个IETester吧。

9、HTML简介

ICO图标是用的LINK引入的。

10、标签

文档章节：body header nav aside article section footer hx

标题：h1~h6 

超链接：a   可以用target来指定打开的位置，可以设置为一个名称，将会在所以名称的iframe标签中打开。

eg:
<a href="xxx" target="inner"></a>
<iframe name="inner"></iframe>

也可以用来创建锚点:
<a href="#pay"></a>
<div id="pay"></div>

强调：em、strong

引用：cite、q

代码：code

格式化：b、i

保留格式：pre

大段引用：blockquote  这个标签里面有cite属性，这个属性可以引用一个地址。

嵌入页面：iframe  <iframe src="http://www.163.com"></iframe>，在嵌入的这个页面进行操作，不会影响当前页面。
例：在当前页面中放入播放器，然后再嵌入一个新的页面，在新的页面操作的同时，播放器并不会停止播放。

嵌入外部资源：object、embed

<object type="application/x-shockwave-flash">
	<param name="movie" value="http://reader.swf">
	<param name="flashvars" value="book.pdf">

</object>


<embed type="application/x-shockwave-flash" src="http://reader.swf" width="640" height="480">

视频、音频：video、audio

<video controls="controls" poster="/img/poster.jpg">
	<source src="movie.mp4" type="video/mp4">
	<source src="movie.webm" type="video/webm">
	<source src="movie.ogg" type="video/ogg">
	<track kind="subtitles" src="video.str" label="English">
	您的浏览器不支持video标签。
</video>

嵌入资源：canvas、svg

canvas是位图，而svg是矢量图。

热点区域：map、area

表格：table
caption(表格标题) thead(表格头部) tbody(表格主体) tfoot(表格底部)
tr(表格的行) th(表头的单元格) td(普通单元格)
可以用colspan属性来进行跨列。可以用rowspan属性来进行跨行。

表单：form
form有两个属性:action(提交到某个位置) method(提交的方式)
表单的分区：fieldset
fieldset内还能用legend设置分区的标题。

表单的内容:input
input有两个重要属性：name(名称) value(值)  这两个是提交到后台的重要数据。

提交与重置：input标签的type类型为submit和reset
如果想更好的语义化，可以用button标签来表示。一样的type类型为submit和reset

提示信息：label  
label的for属性和对应的表单标签的id属性要对应。

默认选中的话，可以加checked属性。

11、实体字符

value属性里面也可以用实体字符。

12、CSS简介

浏览器私有属性：
chrome、safari:-webkit-
firefox:       -moz-
IE:            -ms-
opera:         -o-

eg:
.pic{
	-webkit-transform:rotate(-3deg);
	-moz-transform:rotate(-3deg);
	-ms-transform:rotate(-3deg);
	-o-transform:rotate(-3deg);
	transform:rotate(-3deg);
}

@规则：

@media:响应式
@keyframes:动画
@font-face:外部字体

13、选择器

!important:其它方法都不适用的情况下，才用这种方法来提升权重。

14、文本

字体如果设置的为em或者百分比的话，相比较的元素是父元素。

文字的缩写：font-style font-weight font-size/line-height font-family
eg: font:italic bold 20px/1.5 arial,serif;
font属性里文字大小和字体是两个必填项。

是否透明在color属性里：1表示不透明，0.5表示透明一半。或者直接写成color:transparent，表示全透明。
eg:color:rgba(255,0,0,0.5);

文字对齐：text-align:left|right|center|justify(两端对齐)
两端对齐并不会将字母拉的很开，而是拉开空格。

垂直对齐：vertical-align
vertical-align:baseline|sub|super|top|text-top|middle|bottom|text-bottom|<percentage>|<length>
               基线对齐 下标 上标 顶部 文本顶部 居中  底部    文本底部    百分比(line-height)  数值
当是数值的时候，就是以baseline为起点，向上走设置的数值。
当是百分比的时候，参照物是line-height

首行缩进：text-indent

可以设一个很大的负值，用以隐藏文字，可以做到代码里存在，但是不显示的效果。

是否保留格式：white-space
white-space:normal|nowrap|pre|pre-wrap|pre-line
normal:合并空格，合并换行，自动换行。
nowrap:合并空格，合并换行，强制一行。
pre:保留空格，保留换行，强制一行。
pre-wrap:保留空格，保留换行，自动换行。
pre-line:合并空格，保留换行，自动换行。

长单词换行:word-wrap
word-wrap:normal|break-word
          不换行   换行

任意单词换行：word-break
word-break:normal|keep-all|break-all
           不换行 不换行   任意字母换行

文字阴影：text-shadow
text-shadow:none|[<length>{2,3} && <color>?]#   前两个值是X轴偏移量，Y轴偏移量，第三个值是模糊半径，最后一个值是阴影颜色。
eg:
text-shadow:1px 2px #f00;
text-shadow:1px 2px 3px #f00;

文字划线：text-decoration
text-decoration:none |[underline||overline||line-through]
                不加线  下划线     上划线    中划线

放不下的时候用点点点：text-overflow
text-overflow:clip|ellipsis
              不加  加成点点点
这个属性需要配合着下面两个属性一起使用：
overflow:hidden;
white-space:nowrap;

手形：cursor
cursor:[<url>,]*[auto|default|none|help|pointer|zoom-in|zoom-out|move]
        自定义图片 自动 箭头  消失 问号 手形    放大镜  缩小镜   往两边的箭头
eg:cursor:url(xx.cur),pointer;

强制继承：inherit
如果填写的值是这个，那么该元素将会强制继承父元素的样式。
eg:font-size:inherit;

15、盒模型

width、height:如果设置为百分比，参照元素是父元素。

注意：行内元素是无法设置宽高的。

四个边框可以分别设置。比如边框的样式，可以通过border-style来设置，值可以是1~4个。

圆角边框：border-radius
eg:
border-radius:10px;
border-radius:0px 5px 10px 15px/20px 15px 10px 5px;
border-radius:50%;(这是一个正圆，百分比的参照物是自身的宽高度。)
border-top-left-radius:10px;(这只是设置了一个左上角。)

溢出处理：overflow
overflow:visible|hidden|scroll|auto
         可视    隐藏    滚动  自动（内容少不会显示滚动条，内容多就会显示滚动条）
引申：单独设置水平方向超出或者垂直方向超出怎么办(overflow-x,overflow-y)

让width和height设置的是盒模型的边框大小：box-sizing(常用于响应式)
box-sizing:content-box|border-box|inherit
eg:
width:150px;
height:150px;
padding:50px;
border:5px solid blue;
box-sizing:border-box;

盒阴影：box-shadow
box-shadow:none|<shadow>[,<shadow>]*
<shadow>:inset?&&<length>{2,4}&&<color>?
eg:
box-shadow:4px 6px 3px 3px red;
           水平偏移 垂直偏移 模糊半径 阴影大小 阴影颜色
box-shadow:3px 3px 5px 2px;

box-shadow:inset 0px 0px 5px red;(内阴影)
           内阴影

box-shadow:3px 3px 5px 2px，inset 0px 0px 5px red; (多阴影，内外都有)

注：阴影不占空间

描绘轮廓：outline
不占空间，在border以外。
outline:[<outline-width>||<ouline-style>||<outline-color>]|inherit
outline-width:<length>
outline-style:solid|dashed|dotted
outline-color:<color>|invert(相反色)
eg:
outline:5px dashed blue;

16、背景

背景图片可以设置多个url，会引入多个图片，先引入的在上层，后引入的在下层。
平铺：可以写两个值，第一个值是X轴平铺形式，第二个值是Y轴平铺形式。
如果引入的背景图片是两张，平铺的时候就可以把第一组值和第二组值用逗号隔开，形成分别对应两张图片的两组平铺值

背景是否随文字滚动：background-attachment
background-attachment:<attachment>[,<attachment>]*
<attachment> = scroll|fixed|local
eg:
background-attachment:local;

背景图定位：
当值是四个值的时候：
background-position:right 10px top 20px; (距右侧10PX，距上侧20PX)

线性渐变：linear-gradient()
background-image:linear-gradient([[<angle>| to <side-or-corner>],]?<color-stop>[,<color-stop>]+)

angle:角度
side-or-corner:线性方向
color-stop:颜色的断点

<side-or-corner> = [left|right]||[top|bottom]

<color-stop> = <color> [<percentage> | <length>]?

percentage:位置

eg:
background-image:linear-gradient(red,blue);
background-image:linear-gradient(to top,red,blue);
background-image:linear-gradient(to right bottom,red,blue);
background-image:linear-gradient(0deg,red,blue);
background-image:linear-gradient(red,green,blue);
background-image:linear-gradient(red,green 20%,blue);

径向渐变：radial-gradient()

eg:
background-image:radial-gradient(closest-side,red,blue);
background-image:radial-gradient(circle,red,blue);
background-image:radial-gradient(circle 100px,red,blue);
background-image:radial-gradient(red,blue);
background-image:radial-gradient(100px 50px,red,blue);
background-image:radial-gradient(100px 50px at 0 0,red,blue);
background-image:radial-gradient(red,green 20%,blue);

重复线性/径向渐变：repeat-*-gradient
eg:
background-image:repeating-linear-gradient(red,blue 20px,red 40px);

background-image:repeating-radial-gradient(red,blue 20px,red 40px);

背景图片右下角位置：background-origin
background-origin:<box>[,<box>]*
<box>=border-box|padding-box|content-box
默认是padding-box
eg:
background-origin:border-box;

裁剪背景：background-clip（只要背景在某个区域出来，比如content-box内）
默认是border-box
eg:
background-clip:content-box;

背景大小：background-size
如果要设置成百分比的话，参照元素是父容器元素，如果父容器宽高比例与图片不同的话，图片有可能会变形。

背景属性缩写：
如果背景定位和背景大小缩写到一起，就用/隔开，前面的是定位，后面的是大小。
这里如果出现一个content-box,那么，即是background-origin，也是background-clip。
这里如果出现两个content-box，那么，第一个是background-origin，第二个是background-clip。
eg:
background:url(red.jpg) 0 0/20px 20px no-repeat,url(blue.jpg) 50% 50%/contain no-repeat content-box green;

17、布局

设置元素的显示方式：display
display:block|inline|inline-block|none

display:block(块级元素)
1、默认宽度为父元素宽度
2、可设置宽高
3、换行显示

display:inline(行级元素)
1、默认宽度为内容宽度
2、不可设置宽高
3、同行显示
4、超出部分的内容换行显示（若元素超出父元素界限，则超出部分的内容换行显示。）

display:inline-block(行内块)
1、默认宽度为内容宽度
2、可设置宽高
3、同行显示
4、整块换行（若元素超出父元素界限，则整块换行显示。）

display:none(不显示)
1、设置元素不显示（彻底消失）

display:none vs visibility:hidden
display:none(彻底消失，不占据空间)
visibility:hidden(消失，但是还占据着空间)

块级元素水平居中：
html:
<div>
<div class="content">content area</div>
</div>
css:
.content {margin: 0 auto; width:978px;}

居中导航：
html:
<ul>
<li><a href="#">推荐</a></li>
<li><a href="#">歌单</a></li>
</ul>
css:
ul {text-align:center; height:30px; line-height:30px;}
li,a {display:inline-block; width:80px; height:100%;}
li {margin:0 10px;}

定位：position
position:设置定位方式
配合position使用：top right bottom left z-index
注：如果同时设置了上下左右四个边缘，就会将内容撑开。
注：z-index需要配合position来使用。

z-index 栈
当元素1参照物的z-index大于元素2的参照物的z-index的时候，不论元素2的z-index设置的有多大，元素1都会在元素2上面。

position:static|relative|absolute|fixed
         默认    相对定位 绝对定位 固定定位

position:relative
1、仍在文档流中
2、参照物是元素本身
3、常用在改变元素的层级（配合z-index使用。）
4、最常用的地方是绝对定位的参照物



position:absolute
1、默认宽度是内容宽度
2、脱离文档流
3、参照物为第一个定位祖先或者根元素

position:fixed
1、默认宽度为内容宽度
2、脱离文档流
3、参照物为视窗

如果固定定位以后，内容区记得要设置padding值，防止盖住看不到。

布局-遮罩：
.mask {position:fixed; left:0; top:0; z-index:999; width:100%; height:100%; background-color:#000; opacity:0.3;}

布局-三行自适应：（顶栏定高在顶部，底栏定高在底部，中间自适应）
.head {position:absolute; top:0; left:0; width:100%; height:100px;}
.body {position:absolute; left:0; top:100px; right:0; bottom:100px; overflow:auto;}
.foot {position:absolute; left:0; bottom:0; width:100%; height:100px;}
注意：不能给body加高度，要在body里面加内容，然后给内容加高度，这样如果高度过高，就会因为overflow:auto;出现滚动条。如果直接给body加高度的话，顶栏还是会被顶出去的。

float:
float:left|right
1、默认宽度为内容宽度
2、脱离文档流（不完全脱离）
3、向指定方向一直移动

float的元素在同一文档流

float元素半脱离文档流
对元素，脱离文档流，对内容，在文档流。DE

clear:清除浮动
clear:both|left|right
1、应用于后续元素
2、应用于块级元素
清除浮动对后续元素的影响

应用方式：
1、空白元素(换行元素即可) 
在浮动元素的最后面加一个换行元素，然后加样式 {clear:both; height:0; overflow:hidden; visibility:hidden;}

2、clearfix(加在浮动元素的父元素上)
.clearfix:after{content:".";display:block;clear:both;height:0;overflow:hidden;visibility:hidden;}
.clearfix {zoom:1;}

布局-多行自适应、多列自适应、间距自适应、任意对齐

弹性布局：flex
flex container:弹性容器
flex item:弹性元素
main axis:主轴
cross axis:辅轴

创建flex container:
display:flex;

flex item:在文档流中的子元素
比如，普通子元素是弹性元素，浮动的子元素也是弹性元素，但是绝对定位的元素和后代元素就不是弹性元素。

方向：
弹性：
对齐：

方向：flex-direction  flex-wrap  flex-flow  order

flex-direction(弹性的方向):
flex-direction:row | row-reverse | column | column-reverse
               行    反向行         列       反向列

flex-wrap(换行)
flex-wrap:nowrap | wrap | wrap-reverse
          不换行   换行    向上换行

flex-flow(值缩写，建议值缩写)
flex-flow:<'flex-direction'> || <'flex-wrap'>
eg:flex-flow:initial;        横向排列且不换行
   flex-flow:column wrap     竖向排列且换行
   flex-flow:row-reverse wrap-reverse   反向横列且反向换行

order(顺序)
order:<interget>
initial:0(默认值是0)
eg:order:1;
值越大，排的位置越靠后，因为默认值是0

弹性：flex-grow  flex-shrink  flex-basis

flex-basis(设置flex-item的初始宽高)
flex-basis:main-size(默认值是主轴的大小) | <width>

flex-grow(分配剩余空间比例)
flex-grow:<number>
initial:0(默认是0)

flex-shrink(在元素超出空间的时候，超出的部分按什么比例分配。值越大，分配的超出空间越多，所以本身元素就越小。)
flex-shrink:<number>
initial:1(默认值是1)

flex(值缩写)
flex:<'flex-grow'> || <'flex-shrink'> || <'flex-basis'>
initial:0 1 main-size

对齐：justify-content  align-items  align-self  align-content

justify-content(设置主轴的对齐方式)
justify-content:flex-start | flex-end | center | space-between | space-around
                 左对齐       右对齐    居中对齐  两端对齐，平分剩余空间  两端也会平分剩余空间

align-items(设置cross-axis方向上的对齐方式)
align-items:flex-start | flex-end | center | baseline | stretch
            居上对齐     居下对齐   居中对齐  基线对齐   延展对齐

align-self(设置单个flex item在cross-axis方向上对齐方式)
align-self:auto | flex-start | flex-end | center | baseline | stretch
           应用容器对齐  居上对齐  居下对齐 居中对齐  基线对齐  延展对齐

align-content(设置cross-axis方向上行对齐方式)
align-content:flex-start | flex-end | center | space-between | space-around | stretch
              居上对齐     居下对齐   居中对齐  上下两端对齐，平分剩余空间  上下两端也会平分剩余空间  延展对齐

实现一个三行中间自适应，中间两列，一列定宽，一列自适应的布局。





 

















































































圆角边框：border-radius
文字阴影：text-shadow
盒阴影：box-shadow

































  































































