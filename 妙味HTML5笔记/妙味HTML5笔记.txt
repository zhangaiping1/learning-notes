1、初识HTML5
header:页面的头部或者版块的头部
footer:页面的底部或者版块的底部
nav:导航（里面可以套各种标签，并且没有默认样式，很干净。）
hgroup:页面上的标题组合。
section:划分区域
article:结构完整相对独立的部分，比如一个帖子
aside:和主体相关的附属信息
figure:媒体元素组合父级
figcaption:媒体元素组合子级 
time:时间标签
address:定义文章或页面作者的详细联系信息。

datalist:提示列表一类的东西。此标签带功能，鼠标点上去的时候会提示选项，或者输入一个字母，会提示相关的项。这个就是那个列表，需要与输入框相关联使用。
details:缩略信息。此标签带功能。需要与summary标签一起使用。
mark:标记一个词，带功能，会带黄色背景。
keygen:公钥
progress:进度条。

2、HTML5语义化标签的兼容
低版本的浏览器不能解析H5标签，可以用JS创建该标签，就可以解析到了。
创建好以后的标签记得加默认的样式，比如：display:block;直接加到CSS里面就行。
<script>
document.createElement("header");
document.createElement("article");
...
</script>

以上的这些可以用一个插件解决：html5shiv.js
但是，关于HTML5标签带的一些功能，是没有实现的，需要自己用JS去改写。

3、HTML5新增表单控件和表单属性
email:如果输入的不是邮箱，会有提示。

4、HTML5表单验证反馈
通过对validity.valid属性的检测来判定是否验证通过，如果通过，该值为true，如果不通过，该值为false。
方法：获取当前元素-给当前元素添加invalid事件-事件后面跟上函数-函数内就可以输入这个方法，来验证是否通过。
invalid事件:当input元素内验证不通过时触发该事件。



formnovalidate：关闭验证


1、新的选择器
querySelector():传入的参数可以是ID,可以是标签，可以是class,可以是某个属性。只能选中一组中的第一个元素。
id:#div1  标签：div1  class:.div1   属性：[title=hello]
querySelectorAll():选中一组元素。
classList:一个类似于数组的对象，这个对象包含了当前元素的所有class。

2、JSON的新方法
parse():把字符串转成JSON，字符串中的属性要严格的加上引号
stringify():把JSON转化成字符串，会自动的把双引号加上
如何其他浏览器做到兼容：www.json.org去下载json2.js
把这两个方法联合起来使用可以深复制对象。先把一个对象转换成字符串，然后把这个字符串再转换成一个新对象。


以下的内容我决定跳着看，首先看HTML5，JS和其它的暂时先放放。

3、自定义数据与JS加载
dataset:alert(oDiv.dataset.miaov)获取到元素上的自定义属性。
以下两个属性添加在JS的引用语句中，确定JS加载顺序。
defer:延迟加载，会按顺序执行，在onload执行前被触发。（先加载其它的文件，最后加载这个文件，并且最后执行这个文件。）
async:异步加载，加载完就触发，有顺序问题。（异步加载文件，所以有可能会找不到DOM元素。另外谁先加载完就会立即执行，所以没办法保证执行顺序。）
异步加载的库：labjs库（这个库已经把兼容性写好）

4、历史管理history
onhashchange:改变hash值来管理。当hash值改变时会触发这个事件，从而可以跳转页面。
history:
-服务器下运行
-pushState:三个参数：数据 标题（都没实现） 地址（可选，地址不变会用户有可能不适应）
-popstate事件：读取数据 event.state
-注意：网址是虚假的，需在服务器指定对应页面，不然刷新找不到页面

5、拖放操作一
在元素上加上draggable="true" 属性，就可以拖拽了
<div draggable="true"></div>
拖放事件：
拖拽元素事件：事件对象为被拖拽元素
-dragstart:拖拽前触发
-drag:拖拽前，拖拽结束之间，连续触发。
-dragend:拖拽结束触发
目标元素事件：事件对象为目标元素
-dragenter:进入目标元素触发，相当于mouseover
-dragover:进入目标、离开目标之间，连续触发
-dragleave:离开目标元素触发，相当于mouseout
-drop:在目标元素上释放鼠标触发。（要想触发drop事件，就必须在dragover当中阻止默认事件）（oDiv.ondragover=function (ev) {ev.preventDefault();};）

6、拖放操作二
解决火狐下的问题：
-必须设置dataTransfer对象的setData方法才可以拖拽除图片外的其他标签。（图片默认是可以直接拖拽的。）
dataTransfer对象：
-setData():设置数据key和value(必须是字符串)
-getData():获取数据，根据key值，获取对应的value。
eg:ev.dataTransfer.setData('name','hello');
-effectAllowed:设置光标样式，参数包括（none,copy,copyLink,copyMove,link,linkMove,move,all,uninitialized）
-setDragImage:设置拖放的样式，三个参数，指定的元素（可以是图片） 坐标X  坐标Y

7、拖放操作三
files:
-获取外部拖拽的文件，返回一个filesList列表
-filesList下有个type属性，返回文件的类型。

8、拖放操作四
拖拽购物实例
appendChild有剪切的功能，当新创建appendChild的时候，上一个创建的就会被剪切掉。


1、canvas
引入：<canvas id=c1 width="400" height="400">
        <span>不支持canvas的浏览器</span>
      </canvas>   默认宽300像素，高150像素。

下面要开始绘制了。
<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.fillStyle="red";                     //改变填充颜色

oGC.strokeStyle="blue";                  //改变边框颜色

oGC.lineWidth = 10;                      //改变边框大小

oGC.lineJoin = "round";                  //绘制圆角边框   bevel(斜角)

oGC.fillRect(50,50,100,100);             //绘制填充的方块，默认黑色

oGC.strokeRect(50.5,50.5,100,100);       //绘制一个带边框（1PX）的方块，没有填充。
                                       //带上点五，就是一像素，不带点五，就是两像素。
                               //边框和填充的顺序不同，效果就会不同，主要是谁覆盖谁。

};

</script>


绘制路径：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.beginPath();                         //开始绘制

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.lineTo(300,200);                     //在300，200点下另一个点。

oGC.closePath();                         //闭合

oGC.stroke();                            //画线   fill(填充)  



};

</script>

绘制矩形：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.beginPath();                         //开始绘制

oGC.rect(100,100,100,100);               //绘制一个矩形，需要下面画线以后才会显示。

oGC.closePath();                         //闭合

oGC.stroke();                            //画线   fill(填充)  

oGC.clearRect(0,0,oC.width,oC.height);   //这个方法可以删除一个矩形区别，设置到最大，就是清空画布。



};

</script>


保存路径和恢复路径：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.save();                              //保存路径   这里开始计算保存

oGC.fileStyle = "red";                   //填充颜色

oGC.beginPath();                         //开始绘制

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.lineTo(300,200);                     //在300，200点下另一个点。

oGC.closePath();                         //闭合

oGC.fill();                            //画线   fill(填充)  

oGC.restore();                           //恢复路径   这里开始恢复不保存
                                         //从保存路径到恢复路径，里面的内容不会影响到外部的内容 。比如填充不会影响到以后的内容。

};



端点样式：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.lineWidth = 20;

oGC.lineCap = "round";                   //圆形的顶点
                                         //square，会将线变长，变长的距离是线宽度的一半。

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.stroke();                            //画线   fill(填充)  

};

小例：鼠标画线

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oC.onmousedowm=function(ev) {

var ev=ev || window.event;

oGC.moveTo(ev.clientX-oC.offsetLeft,ev.clientY-oC.offsetTop);

document.onmousemove=function (ev) {

var ev=ev || window.event;
oGC. lineTo(ev.clientX-oC.offsetLeft,ev.clientY-oC.offsetTop);
oGC.stroke();

};
document.onmouseup=function () {

document.onmousemove=null;
document.onmouseup=null;

};
};
};


小例：方块移动

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

var num=0;

oGC.fillRect(0,0,100,100);

setInterval(function () {

num++;

oGC.clearRect(0,0,oC.width,oC.height);

oGC.fillRect(num,num,100,100);

},30);

};


注意：canvas的宽高设置在canvas标签内，不能设置到style里，否则会宽高不对。









































