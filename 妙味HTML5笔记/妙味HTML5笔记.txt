1、初识HTML5
header:页面的头部或者版块的头部
footer:页面的底部或者版块的底部
nav:导航（里面可以套各种标签，并且没有默认样式，很干净。）
hgroup:页面上的标题组合。
section:划分区域
article:结构完整相对独立的部分，比如一个帖子
aside:和主体相关的附属信息
figure:媒体元素组合父级
figcaption:媒体元素组合子级 
time:时间标签
address:定义文章或页面作者的详细联系信息。

datalist:提示列表一类的东西。此标签带功能，鼠标点上去的时候会提示选项，或者输入一个字母，会提示相关的项。这个就是那个列表，需要与输入框相关联使用。
details:缩略信息。此标签带功能。需要与summary标签一起使用。
mark:标记一个词，带功能，会带黄色背景。
keygen:公钥
progress:进度条。

2、HTML5语义化标签的兼容
低版本的浏览器不能解析H5标签，可以用JS创建该标签，就可以解析到了。
创建好以后的标签记得加默认的样式，比如：display:block;直接加到CSS里面就行。
<script>
document.createElement("header");
document.createElement("article");
...
</script>

以上的这些可以用一个插件解决：html5shiv.js
但是，关于HTML5标签带的一些功能，是没有实现的，需要自己用JS去改写。

3、HTML5新增表单控件和表单属性
email:如果输入的不是邮箱，会有提示。

4、HTML5表单验证反馈

表单验证：
validity对象，通过下面的valid可以查看验证是否通过，如果八种验证都通过返回true,一种验证失败返回false。

eg:
oText.addEventListener("invalid",fn,false);
function fn() {

	alert(this.validity.falid);//如果验证通过返回true,如果验证失败返回false

}


-oText.addEventListener("invalid",fn1,false);
-ev.preventDefault()  阻止默认事件
-valueMissing:输入值为空时，返回true eg:this.validity.valueMissing
-typeMismatch:控件值与预期类型不匹配，返回true
-patternMismatch:输入值不满足pattern正则,返回true
-toolong:超过maxLength最大限制，返回true
-rangeUnderflow:验证的range最小值，不符合最小值返回true
-rangeOverflow:验证的range最大值，不符合最大值返回true
-stepMismatch:验证range的当前值是否符合min\max及step的规则，不符合返回true
-customError:输入自定义验证的关键词时，返回true
  》setCustomValidity();自定义验证

formnovalidate：表单上加上该属性，可以关闭验证



关于自定义验证：
eg:
oText.oninput=function () {

	if(this.value=="敏感词") {
		this.setCustomValidity("请不要输入敏感词");
		//这里的customError返回true

	}

}



通过对validity.valid属性的检测来判定是否验证通过，如果通过，该值为true，如果不通过，该值为false。
方法：获取当前元素-给当前元素添加invalid事件-事件后面跟上函数-函数内就可以输入这个方法，来验证是否通过。
invalid事件:当input元素内验证不通过时触发该事件。如果通过就直接提交了，不会触发这个事件。






1、新的选择器

html5相关网站：www.caniuse.com/#index

querySelector():传入的参数可以是ID,可以是标签，可以是class,可以是某个属性。只能选中一组中的第一个元素。
id:#div1  标签：div   class:.div1   属性：[title=hello]
querySelectorAll():选中一组元素。然后要对这组元素进行循环操作，不能直接加状态，直接加加不上去。

注：其实原生JS里面凡是获取一组元素的，都不能直接加属性，都需要循环着来加属性。否则加不上去。

classList:这个对象包含了当前元素的所有class，可以用来获取到当前元素所有的class名，是一个类似于数组的对象。
包括三个对class操作的方法：add() remove() toggle()
eg:oDiv.classList.add('box4');

2、JSON的新方法

eval():接收一个JS字符串，并运行其中的JS代码。
eg:eval("function show() {alert(1);}");
   show();  //结果弹出1
注：参数只能接收字符串，string对象是不行的。另外，如果参数出错，运用方式出错，参数运行出错，都是抛出错误。

-parse():把JSON字符串转成JSON对象
 》字符串中的key和value一定要用双引号包括
-stringify():把JSON对象转化成JSON字符串
 》会自动的把双引号加上

注：当JSON字符串转JSON对象时，KEY上必须加引号，否则不能正常的转化。当JSON对象转JSON字符串时，KEY上不需要加双引号，转成字符串以后会自动加上双引号。

-新方法与eval的区别
-新方法的应用
 》深度克隆新对象 //将对象转换成字符串，然后再转换成对象，就会是一个新的对象，再修改属性的话，就不会对以前的对象造成影响。
-如何其他浏览器做到兼容
 》www.json.org去下载json2.js


3、自定义数据与JS加载

data自定义数据
-dataset
 》data-name:dataset.name
 》data-name-first:dataset.nameFirst
-Data数据在jquery mobile中有着重要作用

延迟加载JS   //默认情况下是顺序加载
-JS的加载会影响后面的内容加载
 》很多浏览器都采用了并行加载JS，但还是会影响其他内容

-HTML5的defer和async
 》defer:延迟加载，会按顺序执行，在onload执行前被触发
 eg:<script src="a.js" defer="defer"></script>
 延迟加载并不是晚加载，加载还是会加载，但是会延迟执行。加上这个属性以后加载完并不会立即执行，会等整个页面加载完，触发onload事件之前执行。
 onload事件：在整个页面加载完以后会触发这个事件。
注：只能给外链JS文件加，内部的加载会有问题。

 》async:异步加载，加载完就触发，有顺序问题
 异步加载：所有文件同时加载，并且哪个文件加载完后立即执行。
-labjs库

dataset:alert(oDiv.dataset.miaov)获取到元素上的自定义属性。
以下两个属性添加在JS的引用语句中，确定JS加载顺序。
defer:延迟加载，会按顺序执行，在onload执行前被触发。（先加载其它的文件，最后加载这个文件，并且最后执行这个文件。）
async:异步加载，加载完就触发，有顺序问题。（异步加载文件，所以有可能会找不到DOM元素。另外谁先加载完就会立即执行，所以没办法保证执行顺序。）
异步加载的库：labjs库（这个库已经把兼容性写好）

4、历史管理history

历史管理
触发历史管理：1、通过跳转页面  2、hash  3、pushState

window.location.hash
-onhashchange:改变hash值来管理
-history:
 》服务器下运行
 》pushState:三个参数：数据 标题（都没实现） 地址（可选）
 》popstate事件：读取数据event.state
 》注意：网址是虚假的，需要在服务器指定对应页面，不然刷新找不到页面


onhashchange:改变hash值来管理。当hash值改变时会触发这个事件，从而可以跳转页面。
history:
-服务器下运行
-pushState:三个参数：数据 标题（都没实现） 地址（可选，地址不变会用户有可能不适应）
-popstate事件：读取数据 event.state
-注意：网址是虚假的，需在服务器指定对应页面，不然刷新找不到页面

5、拖放操作一

HTML5新特性的浏览器支持情况
-www.caniuse.com/#index
拖放：
-draggable:
 》设置为true,元素就可以拖拽了
拖放事件：
-拖拽元素事件：事件对象为被拖拽元素
 》dragstart:拖拽前触发
 》drag:拖拽前、拖拽结束之间，连续触发
 》dragend:拖拽结束触发
-目标元素事件：事件对象为目标元素
 》dragenter:进入目标元素触发，相当于mouseover
 》dragover:进入目标、离开目标之间，连续触发
 》dragleave:离开目标元素触发，相当于mouseout
 》drop:在目标元素上释放鼠标触发
   注：要想触发drop事件，就必须在dragover当中阻止默认事件。
   eg:oDiv.ondragover=function (ev) {ev.preventDefault();};



拖放事件：
-事件的执行顺序：drop不触发的时候
 》dragstart>drag>dragenter>dragover>dragleave>dragend
-事件的执行顺序：drop触发的时候（dragover的时候阻止默认事件）
 》dragstart>drag>dragenter>dragover>drop>dragend
-不能释放的光标和能释放的光标不一样。


在元素上加上draggable="true" 属性，就可以拖拽了
<div draggable="true"></div>
拖放事件：
拖拽元素事件：事件对象为被拖拽元素
-dragstart:拖拽前触发
-drag:拖拽前，拖拽结束之间，连续触发。
-dragend:拖拽结束触发
目标元素事件：事件对象为目标元素
-dragenter:进入目标元素触发，相当于mouseover
-dragover:进入目标、离开目标之间，连续触发
-dragleave:离开目标元素触发，相当于mouseout
-drop:在目标元素上释放鼠标触发。（要想触发drop事件，就必须在dragover当中阻止默认事件）（oDiv.ondragover=function (ev) {ev.preventDefault();};）

6、拖放操作二

拖放事件：
-解决火狐下的问题
 》必须设置dataTransfer对象的setData方法才可以拖拽除图片外的其他标签。图片是可直接拖拽的。
-dataTransfer对象
 》setData():设置数据key和value（必须是字符串）
 》getData():获取数据，根据key值，获取对应的value
eg:aLi[i].ondragstart=function (ev) {

	var ev=ev||window.event;
	ev.dataTransfer.setData('name','hello');

}
oDiv.ondrop=function (ev) {

	alert(ev.dataTransfer.getData('name'));  //hello
}

拖拽删除元素小例

dataTransfer对象：
-effectAllowed:
 》effectAllowed:设置光标样式（none,copy,copyLink,copyMove,link,linkMove,move,all,uninitialized）
-setDraglmage:（拖拽的样式）
 》三个参数：指定的元素，坐标X，坐标Y。

拖拽排序列表小例






解决火狐下的问题：
-必须设置dataTransfer对象的setData方法才可以拖拽除图片外的其他标签。（图片默认是可以直接拖拽的。）
dataTransfer对象：在进行拖放操作时，DataTransfer 对象用来保存被拖动的数据。它可以保存一项或多项数据、一种或者多种数据类型。
-setData():设置数据key和value(必须是字符串)
-getData():获取数据，根据key值，获取对应的value。
eg:ev.dataTransfer.setData('name','hello');
-effectAllowed:设置光标样式，参数包括（none,copy,copyLink,copyMove,link,linkMove,move,all,uninitialized）
-setDragImage:设置拖放的样式，三个参数，指定的元素（可以是图片） 坐标X  坐标Y

7、拖放操作三

-files
 》获取外部拖拽文件，返回一个fileList列表
 》filelist下有个type属性，返回文件的类型。
 注：拖文件进入浏览器以后默认会打开，如果不想打开，要关闭默认行为。
     这里关闭默认行为要注意，不只是关闭释放的默认行为，移入以后到移出之前这一段的默认行为也要关闭，就是关闭ondragover的默认行为。

FileReader(读取文件信息，注意F和R都是大写的)
-readAsDataURL
 》参数为要读取的文件对象，将文件读取为DataUrl
-onload
 》当读取文件成功完成的时候触发此事件
 》this.result,来获取读取的文件数据，如果是图片，将返回base64格式的图片数据

eg:
oDiv.ondrop=function (ev) {
                    ev.preventDefault();
                    var fs=ev.dataTransfer.files;
                    for(var i=0;i<fs.length;i++) {
                        var fd=new FileReader();
                        fd.readAsDataURL(fs[i]);
                        fd.onload=function () {
                            var oLi=document.createElement('li');
                            var oImg=document.createElement('img');
                            oImg.src=this.result;
                            oLi.appendChild(oImg);
                            oUl.appendChild(oLi);
                        };
                    };
                };

-实例：
 》拖拽删除列表
 》拖拽购物车
 》上传图片预览功能



8、拖放操作四
拖拽购物实例
其实就是一个在拖放的时候读写数据的过程，拖的时候读，放的时候写。
dataTransfer是一个ev下的功能。ev.dataTransfer.setData('','');
setData设置数据。getData读出设置的数据。
appendChild有剪切的功能，当新创建appendChild的时候，上一个创建的就会被剪切掉。


1、canvas

标签：
<canvas>--不支持canvas的浏览器可以看到这里的内容</canvas>

绘制环境：
getContext('2d'):目前支持2D的场景

注：绘制的图形的样式都要放到绘制之前。比如颜色，填充，线宽，都要放到绘制之前。

绘制方块：
-fillRect(L,T,W,H):默认颜色是黑色
-strokeRect(L,T,W,H):带边框的方块
 》默认一像素黑色边框，显示出来的不一样原因

设置绘图：
-fillStyle:填充颜色（绘制canvas是有顺序的）
-lineWidth:线宽度，是一个数值
-strockeStyle:边框颜色

注：填充和边框绘制的顺序不一样的话，显示效果会不一样。后绘制的图形会覆盖在前绘制的图形上边。

边界绘制：
-lineJoin:边界连接点样式
 》miter(默认) round(圆角) bevel(斜角)
-lineCap:端点样式
 》butt(默认) round(圆角) square(高度多出为宽一半的值)

绘制路径：
-beginPath:开始绘制路径
-closePath:结束绘制路径
-moveTo:移动到绘制的新目标点
-lineTo:新的目标点

绘制路径2：
-stroke:画线，默认黑色
-fill:填充，默认黑色
-rect:矩形区域
-clerRect:删除一个画布的矩形区域
-save:保存路径  （可以用保存路径和恢复路径保存更改的内容，这个区域的内容不会影响到其它区域，里面的内容就像局部变量一样。）
-restore:恢复路径
-小例子：鼠标画线 
-小例子：方块移动

注：canvas画布的宽高要设置在canvas元素内，不能设置到其它的样式里，否则里面绘制的元素会变形。


引入：<canvas id=c1 width="400" height="400">
        <span>不支持canvas的浏览器</span>
      </canvas>   默认宽300像素，高150像素。

下面要开始绘制了。
<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.fillStyle="red";                     //改变填充颜色

oGC.strokeStyle="blue";                  //改变边框颜色

oGC.lineWidth = 10;                      //改变边框大小

oGC.lineJoin = "round";                  //绘制圆角边框   bevel(斜角)

oGC.fillRect(50,50,100,100);             //绘制填充的方块，默认黑色

oGC.strokeRect(50.5,50.5,100,100);       //绘制一个带边框（1PX）的方块，没有填充。
                                       //带上点五，就是一像素，不带点五，就是两像素。
                               //边框和填充的顺序不同，效果就会不同，主要是谁覆盖谁。

};

</script>


绘制路径：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.beginPath();                         //开始绘制

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.lineTo(300,200);                     //在300，200点下另一个点。

oGC.closePath();                         //闭合

oGC.stroke();                            //画线   fill(填充)  



};

</script>

绘制矩形：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.beginPath();                         //开始绘制

oGC.rect(100,100,100,100);               //绘制一个矩形，需要下面画线以后才会显示。

oGC.closePath();                         //闭合

oGC.stroke();                            //画线   fill(填充)  

oGC.clearRect(0,0,oC.width,oC.height);   //这个方法可以删除一个矩形区别，设置到最大，就是清空画布。



};

</script>


保存路径和恢复路径：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.save();                              //保存路径   这里开始计算保存

oGC.fileStyle = "red";                   //填充颜色

oGC.beginPath();                         //开始绘制

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.lineTo(300,200);                     //在300，200点下另一个点。

oGC.closePath();                         //闭合

oGC.fill();                            //画线   fill(填充)  

oGC.restore();                           //恢复路径   这里开始恢复不保存
                                         //从保存路径到恢复路径，里面的内容不会影响到外部的内容 。比如填充不会影响到以后的内容。

};



端点样式：

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oGC.lineWidth = 20;

oGC.lineCap = "round";                   //圆形的顶点
                                         //square，会将线变长，变长的距离是线宽度的一半。

oGC.moveTo(100,100);                     //在100，100的位置点下一个点。

oGC.lineTo(200,200);                     //在200，200点下另一个点。

oGC.stroke();                            //画线   fill(填充)  

};

小例：鼠标画线

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

oC.onmousedowm=function(ev) {

var ev=ev || window.event;

oGC.moveTo(ev.clientX-oC.offsetLeft,ev.clientY-oC.offsetTop);

document.onmousemove=function (ev) {

var ev=ev || window.event;
oGC. lineTo(ev.clientX-oC.offsetLeft,ev.clientY-oC.offsetTop);
oGC.stroke();

};
document.onmouseup=function () {

document.onmousemove=null;
document.onmouseup=null;

};
};
};


小例：方块移动

<script>
window.onload=function () {

var oC=document.getElementById("c1");    //获取canvas元素

var oGC=oC.getContext('2d');             //绘制环境

var num=0;

oGC.fillRect(0,0,100,100);

setInterval(function () {

num++;

oGC.clearRect(0,0,oC.width,oC.height);

oGC.fillRect(num,num,100,100);

},30);

};


注意：canvas的宽高设置在canvas标签内，不能设置到style里，否则会宽高不对。

2、canvas
绘制圆：
-arc(x,y,半径，起始弧度，结束弧度，旋转方向)
 》x,y:起始位置
 》弧度与角度的关系：弧度=角度*Math.PI/180
 》旋转方向：顺时针（默认：false）、逆时针（true）
 》例子：用arc去画个钟表

绘制其他曲线：
-arcTo(x1,y1,x2,y2,r)
 》第一组坐标、第二组坐标、半径
-quadraticCurveTo(dx,dy,x1,y1)
 》贝塞尔曲线：第一组控制点、第二组结束坐标
-bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)
 》贝塞尔曲线：第一组控制点、第二组控制点、第三组结束坐标

变换：
-translate:
 》偏移：从起始点为基准点，移动当前坐标位置
-rotate:
 》旋转：参数为弧度（x*Math.PI/180），基准点为左上角。
 》例子：旋转的小方块
-scale:
 》缩放例子：旋转加缩放的小方块，基准点为左上角。


















1、同域下的窗口通信
准备工作：开一个服务器，虚拟两个域名出来。把域名指向文件夹。（虚拟主机）在设置完成以后，要重启服务器。

同域下窗口间通信的方式：
iframe:oMyIframe.contentWindow.document.body.style.background="";
window.open：这个方法在打开新窗口的同时，会返回一个值，这个值就是打开的新窗口这个对象。所以可以通过这个对象，来操作这个新窗口。
newWindow=window.open('4.window.open.html','_blank');
newWindow.document.body.style.background='';

2、窗口跨域操作问题和postMessage的使用
跨域的情况下，可以通过postMessage()方法来操作另一个窗口。
postMessage:
-接收消息的窗口的window对象.postMessage();(要先获取到接收消息的窗口，然后使用接收消息的窗口来操作这个方法。)
-这个方法会发送一些消息给接收消息的窗口。
-http://www.b.com  协议要带全
接收两个参数：第一个参数是发送的数据，第二个参数是接收数据的域名（带上协议）。
eg:oMyIframe.contentWindow.postMessage('abc','http://www.b.com');

-当接收数据的窗口接收到数据的时候，会有一个message事件被触发。那我们就可以将这个事件注册到某个对象下，当事件被触发的时候，发生一个函数，处理一些问题。
-ev.data:发送过来的数据

eg: window.addEventListener('message',function  (ev) {
		alert(ev.data);
	},false);

-这样就可以了，通过postMessage方法可以发送过来数据，而第二个页面在接收到数据的时候触发message方法，通过注册message方法使用一个函数，函数里的ev.data就是发送过来的数据。通过判断这个数据的内容，来操作接收消息的页面发生相应的变化。
eg:
if(ev.data=='1'){
	document.body.style.background='red';
}

-ev.origin:发送消息的域。  如果想判断接收到的消息的来源，就要用到这个。

-现在父级可以操作子级页面，那子级页面怎么操作父级页面。(以下方法是同域下。)
-parent:如果当前页面是顶级，没有被其他页面所包含，那么parent就是当前页面的window对象。如果被包含了，那么parent就是包含当前页面的父级页面的window对象。
eg:同域下：
parent.document.body.style.background='green';

-几个对象：window,parent,top.
top指的是最外层的window对象。
parent指的是上一层的window对象。
这两个如果都是最外层的话，就指向他们本身。

-window.opener:通过window.open方法打开当前页面的那个页面的window


6、websocket服务器的创建和应用







































