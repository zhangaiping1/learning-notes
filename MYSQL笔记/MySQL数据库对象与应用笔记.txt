第一课

数据类型：

整型：INT(4Bytes) SMALLINT(2Bytes) MEDIUMINT(3Bytes) BIGINT(8Bytes)  占用空间越大，存储的数值就越大。

int(11)VS int(21),这两者存储空间有区别还是存储范围有区别？答案是本质上没有区别。
eg:
create table t (a int(11) zerofill , b int(21) zerofill);
insert into t values (1,1);
select * from t;

drop table t;
create table t (a int(11) , b int(21));
insert into t values (1,1);
select * from t;


浮点型： FLOAT(M,D)     DOUBLE(M,D)

属性       存储空间          精度                    精确性
float      四字节            单精度                  非精确
double     八字节            双精度                  比float精度高

精度丢失：
eg:
CREATE TABLE 't' (
'a' int(11) DEFAULT NULL,
'b' float(7,4) DEFAULT NULL
) ENGINE-InnoDB DEFAULT CHARSET=uft8
;

insert into t values (2,123.12345);
select * from t;


定点数-更精确的数字类型：

DECIMAL：
高精度的数据类型，常用来存储交易相关的数据。
DECIMAL(M,N) M代表总精度，N代表小数点右侧的位数（标度）。
1<M<254,0<N<60
存储空间变长（存储空间会变动）

如何存储性别信息和省份信息：  enum(枚举类型)
属性       数据类型            数据格式                                  存储空间
tinyint    number              1:woman 2:man                             1字节
char(1)    string              M/W                                       1字节
enum       string              enum('woman','man')                       1字节/2字节

经验之谈：
存储性别，省份，类型等分类信息时选择TINYINT或者ENUM
BIGINT存储空间更大，INT和BIGINT之间通常选择BIGINT
交易等高精度数据时选择使用DECIMAL
     


第二课

存储用户名的属性：

char:

varchar:
text:

char与varchar存储的单位都是字符

字符与字节的区别：
编码\输入字符串                   网易                        netease
GBK（双字节）                     varchar(2)/4字节            varchar(7)
UTF8(三字节)                      varchar(2)/6字节            varchar(7)
UTF8MB4(四字节)                   varchar(2)/？               varchar(7)

emoji表情
JAVA程序支持emoji表情
MYSQL版本>5.5.3
JDBC驱动版本>5.1.13
库和表的字符集设为utf8mb4

如果选择uft8和utf8mb4，那么优选utf8mb4

char和varchar的区别：
char存储字长，容易造成空间的浪费
varchar存储变长，节省存储空间

text与char和varchar的区别：
char和varchar存储单位为字符。
text存储单位为字节，总大小为65535字节，约为64KB
char数据类型最大为255字符
varchar数据类型为变长存储，可以存储超过255个字符
text在数据库内部大多存储格式为溢出页，效率不如char


存储头像：
BLOB:
BINARY:
这两个虽然都可以用来存储头像，但是非常不推荐。
那用什么存？


经验之谈：
char和varchar定义的长度是字符长度不是字节长度
存储字符串推荐选择使用varchar(n),n尽量小。
虽然数据库可以存储二进制数据，但是性能低下，不要使用数据库存储文件音频等二进制数据。


存储生日信息：
DATE:
TIME:
DATETIME:
TIMESTAMP:
BIGINT:


时间类型的区别在哪里：
存储空间上的区别：
DATE三字节，如：2015-05-01
TIME三字节，如：11:12:00
TIMESTAMP四字节，如：2015-05-01 11:12:00
DATETIME八字节，如：2015-05-01 11:12:00

存储精度的区别：
DATE精确到年月日
TIME精确到小时分钟和秒
TIMESTAMP、DATETIME都包含上述两者


TIMESTAMP VS DATETIME
存储范围的区别：
TIMESTAMP存储范围：1970-01-01 00:00:00 to 2038-01-19 03:14:07
DATETIME的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59
在MYSQL5.6版本以后这两个都可以支持到微秒。

字段类型与时区的关联关系：
TIMESTAMP会根据系统时区进行转换，DATETIME则不会。
所以，如果设计国际化的系统，则推荐TIMESTAMP。

eg:
create table test (a datetime, b timestamp);
show create table test/G
select now();
insert into test values(now(),now());
select * from test;
set time_zone = '+00:00';
select * from test;
set time_zone = '+08:00';
select * from test;


BIGINT如何存储时间类型：
应用程序将时间转为数字类型

BIGINT需要把时间转化为UNIXTIME(MySQL的UNIX_TIMESTAMP()),反向则可以使用(MySQL的from_unixtime(),shell的date -d @XXXX)

自找的参考资料：http://blog.csdn.net/lxpbs8851/article/details/8604747
如果看不懂就百度关键词：UNIX_TIMESTAMP()



第三课



数据类型与数据对象的区别：
行为：
基本类型只是一个值，没有任何行为
对象类型有自己的行为
内存分配：
基本类型在栈内分配
对象在堆内分配
对象引用保存在栈内
引用与值：
基本类型是值类型，仅表示一个值，保存在栈内
引用类型分两部分，对象引用保存在栈内，对象保存在堆内，
访问变量，是使用的引用找对象



数据对象：
DataBase/Schema:
Tabel:
Index(索引):
View(视图)/Trigger(触发器)/Function(函数)/Procedure(存储过程):

库、表、行层级关系：
一个DataBase对应一个Schema
一个Schema包含一个或多个表
一个表里面包含一个或者多个字段
一个表里包含一条或多条记录
一个表包含一个或多个索引

多Database用途:
业务的隔离：比如服务器性能强大，跑一个表浪费，那就建多个database。
资源的隔离：比如一个database里资源过多，搜索过慢，那就建多个database分离一下资源。

表上有哪些常用的数据对象：
索引：
约束：
视图、触发器、函数、存储过程：

什么是数据库索引：
读书的时候如何快速的定位某一个章节：
查找书籍目录。
在自己喜欢的章节夹书签，但是书签太多的话，不容易维护。
索引就相当于查找书籍目录。

索引就是数据库中数据的目录：
索引和数据是两个对象。
索引主要是用来提高数据库的查询效率。
数据库中数据变更同样需要同步索引数据的变更。(这里在设计数据库的时候要注意，否则变更一条数据就要变更很多的索引，那就麻烦了。)

如何创建索引（一）：
help create index:
如何创建索引（二）：
help alter table:

约束：
生活中的约束有哪些：
每个人的指纹信息必须唯一
每个人的身份证要求唯一
网上购物需要先登录才能下订单

唯一约束：
对一张表的某个字段或者某几个字段设置唯一键约束，保证在这个表里对应的数据必须唯一，如：用户ID、手机号、身份证号等。

创建唯一约束：
唯一约束是一种特殊的索引
唯一约束可以是一个或者多个字段
唯一约束可以在建表的时候建好，也可以后面再补上
主键也是一种唯一约束

索引有哪些：
主键索引：ID
单键索引：orderid
单键索引：bookid
组合索引：(userid+orderid)

唯一约束有哪些：
主键约束：id
单键唯一索引：orderid
组合唯一索引：(userid+orderid)

添加唯一约束：
添加主键：
mysql>alter talbe 'order' add primary key (id);
添加唯一索引：
mysql>alter table 'order' add unique key idx_uk_orderid (orderid);

外键约束：
外键指两张表的数据通过某种条件关联起来。

如果没有外键约束：
可以用应用程序来保证外键约束。用应用程序来作判断。

创建外键约束：
将用户表和订单表通过外键关联起来：
mysql>alter table 'order' add CONSTRAINT constarint_uid FOREIGN KEY(userid) REFERENCES user(userid);
如果创建成功的话，可以在show create table 'order'\G来查看，下面会显示如下内容：
KEY 'constarint_uid' ('userid'),
CONSTRAINT 'constarint_uid' FOREIGN KEY ('userid') REFERENCES 'user' ('userid')

使用外键约束的注意事项：
必须是INNODB表，Myisam和其它引擎不支持外键。
相互约束的字段类型必须要一样。
主表的约束字段要求有索引。
约束名称必须要唯一，即便不在一张表上。

eg:
create table 'order' (
'id' int(11) NOT NULL AUTO_INCREMENT,
'bookid' int(10) NOT NULL DEFAULT '0',
'userid' int(10) NOT NULL DEFAULT '0',
'number' tinyint(3) NOT NULL DEFAULT '0',
'address' varchar(128) NOT NULL DEFAULT '',
'postcode' varchar(6) NOT NULL DEFAULT '',
'orderdate' datetime NOT NULL DEFAULT '000-00-00 00:00:00',
'status' tinyint(3) unsigned zerofill DEFAULT '000',
PRIMARY KEY ('id'),
KEY 'bookid'('bookid'),
KEY 'idx_uid'('userid'),
CONSTRAINT 'constarint_uid' FOREIGN KEY ('userid') REFERENCES 'user' ('userid')
)ENGINE-InnoDB DEFAULT CHARSET=latin1

alter table 'order' modify userid int(10) unsigned NOT NULL DEFAULT '0';

show create table 'order'\G;
会显示'userid' int(10) unsigned NOT NULL DEFAULT '0',

alter table 'order' add CONSTRAINT constarint_uid FOREIGN KEY (userid) REFERENCES user(userid);
会报错，后面会有errno:150  查这个编号就查出来错误在哪。百度查。

下面再把他改回去：
alter table 'order' modify userid int(10) NOT NULL DEFAULT '0';
alter talbe 'order' add CONSTRAINT constarint_uid FOREIGN KEY (userid) REFERENCES user(userid);

约束名必须是唯一的，现在这个添加了一个constarint_uid ,如果再给其它的表添加这个。就会报错。
alter table 'order_1' add CONSTRAINT constarint_uid FOREIGN KEY (userid) REFERENCES user_1(userid);
会报错。

alter table 'order_1' add CONSTRAINT constarint_uid_new FOREIGN KEY (userid) REFERENCES user_1(userid);
会成功。

show create table 'order_1'\G;
会显示成功添加。

View:
产品需求：
假如有其它部门的同事想查询我们数据库里的数据，但是我们并不想暴露表的结构，并且只提供给他们部分数据。
怎么办？
两种方法：
第一种，开发一个接口，通过接口返回需要的数据。
第二种，就是通过视图。

View的作用：
视图将一组查询语句构成的结果集，是一种虚拟结构，并不是实际数据。
视图能简化数据库的访问，能够将多个查询语句结构化为一个虚拟结构。
视图可以隐藏数据库后端表结构，提高数据库的安全性。
视图也是一种权限管理，只对用户提供部分数据。

创建View:
创建已完成订单的视图：
create view order_view as select * from 'order' where status=1;

Trigger:
产品需求：
随着用户个人等级的提升，系统需要自动更新用户的积分，其中一共有两张表，分别为：用户信息表和积分表。

两种方法：
第一种，通过应用程序来实现。
第二种，通过Trigger来实现。

数据库实现：
Trigger:
Trigger俗称触发器，指可以在数据写入表A之前或者之后可以做一些其它动作。
使用Trigger在每次更新用户表的时候触发更新积分表。

除此之外还有哪些：
Function:MYSQL提供了很多很多函数，基本可以满足应用。如果不满足，就需要自定义一部分函数。
Procedure（存储过程）:存储的一部分指令集。通过传入参数，返回想要得到的结果。


















  



























































